{"version":3,"file":"node-model.js","names":["LocalNodeModel","constructor","schema","schemaComposer","createPageDependency","_rootNodeMap","_trackedRootNodes","createPageDependencyActionCreator","WeakMap","WeakSet","_prepareNodesQueues","_prepareNodesPromises","_preparedNodesCache","Map","replaceFiltersCache","map","_filtersCache","withContext","context","ContextualNodeModel","getNodeById","args","pageDependencies","id","type","node","result","nodeTypeNames","toNodeTypeNames","includes","internal","trackInlineObjectsInRootNode","wrapNode","trackPageDependencies","getNodesByIds","ids","nodes","Array","isArray","filter","Boolean","length","forEach","wrapNodes","_query","query","stats","tracer","gqlType","getType","invariant","GraphQLUnionType","runQueryActivity","eq","Object","keys","reporter","phantomActivity","parentSpan","getParentActivity","span","start","nodeFoundById","end","entries","GatsbyIterable","totalCount","maybeConvertSortInputObjectToSortPath","materializationActivity","fields","getQueryFields","sort","group","distinct","max","min","sum","fieldsToResolve","determineResolvableFields","nodeTypeName","gqlNodeType","prepareNodes","getDataStore","runQuery","queryArgs","gqlSchema","gqlComposer","resolvedFields","filtersCache","findAll","findOne","Error","skip","limit","undefined","from","first","queryFields","typeName","name","push","Promise","resolve","process","nextTick","_doResolvePrepareNodesQueue","queue","reduce","nextQueryFields","nextFieldsToResolve","actualFieldsToResolve","deepObjectDifference","get","schemaCustomization","customContext","store","getState","resolvedNodes","iterateNodesByType","resolveRecursive","set","size","saveResolvedNodes","getTypes","has","addRootNodeToInlineObject","Set","add","findRootNodeAncestor","obj","predicate","iterations","parent","matchingRoot","tracked","visited","error","getFieldValue","fieldPath","fieldToResolve","pathToObject","getMaybeResolvedValue","rootNodeModel","nodeModel","_getFullDependencies","path","getNode","filterFields","dropQueryOperators","sortFields","split","reduceRight","acc","key","value","k","v","getFields","isAbstractType","concreteType","resolveType","gqlFields","fieldName","queryField","gqlField","gqlNonNullType","getNullableType","gqlFieldType","getNamedType","innerValue","resolveField","isCompositeType","GraphQLList","all","item","withResolverContext","preferDefault","require","arg","defaultValue","returnType","isNestedAndParentNeedsResolve","field","typeComposer","getAnyTC","needsResolve","fieldNeedToResolve","innerResolved","rootNodeMap","data","nodeId","isNode","isPlainObject","o","nodeIds","dispatch","payload","to","toValue","deepResult"],"sources":["../../src/schema/node-model.ts"],"sourcesContent":["import _ from \"lodash\"\nimport {\n  isAbstractType,\n  GraphQLOutputType,\n  GraphQLUnionType,\n  GraphQLList,\n  getNamedType,\n  getNullableType,\n  isCompositeType,\n} from \"graphql\"\nimport invariant from \"invariant\"\nimport reporter from \"../reporter\"\nimport { store } from \"../redux\"\nimport { getDataStore, getNode, getTypes } from \"../datastore\"\nimport { GatsbyIterable } from \"../datastore/common/iterable\"\nimport { wrapNode, wrapNodes } from \"../utils/detect-node-mutations\"\nimport {\n  toNodeTypeNames,\n  fieldNeedToResolve,\n  maybeConvertSortInputObjectToSortPath,\n} from \"./utils\"\nimport { getMaybeResolvedValue } from \"./resolvers\"\nimport { preferDefault } from \"../bootstrap/prefer-default\"\n\ntype TypeOrTypeName = string | GraphQLOutputType\n\nexport interface NodeModel {\n  getNodeById(input: { id: string; type?: TypeOrTypeName }): any | null\n  getNodesByIds(input: {\n    ids: Array<string>\n    type?: TypeOrTypeName\n  }): Array<any>\n  getTypes(): Array<string>\n  findRootNodeAncestor(obj: any, predicate: () => boolean): Node | null\n  trackInlineObjectsInRootNode(node: Node, sanitize: boolean): Node\n  getFieldValue(node: Node, fieldPath: string): Promise<any>\n}\n\nclass LocalNodeModel {\n  constructor({\n    schema,\n    schemaComposer,\n    createPageDependency,\n    _rootNodeMap,\n    _trackedRootNodes,\n  }) {\n    // @ts-ignore\n    this.schema = schema\n    // @ts-ignore\n    this.schemaComposer = schemaComposer\n    // @ts-ignore\n    this.createPageDependencyActionCreator = createPageDependency\n    // @ts-ignore\n    this._rootNodeMap = _rootNodeMap || new WeakMap()\n    // @ts-ignore\n    this._trackedRootNodes = _trackedRootNodes || new WeakSet()\n    // @ts-ignore\n    this._prepareNodesQueues = {}\n    // @ts-ignore\n    this._prepareNodesPromises = {}\n    // @ts-ignore\n    this._preparedNodesCache = new Map()\n    this.replaceFiltersCache()\n  }\n\n  createPageDependency() {}\n\n  /**\n   * Replace the cache either with the value passed on (mainly for tests) or\n   * an empty new Map.\n   *\n   * @param {undefined | null | FiltersCache} map\n   * This cache caches a set of buckets (Sets) of Nodes based on filter and tracks this for each set of types which are\n   * actually queried. If the filter targets `id` directly, only one Node is\n   * cached instead of a Set of Nodes. If null, don't create or use a cache.\n   */\n  replaceFiltersCache(map = new Map()) {\n    // @ts-ignore\n    this._filtersCache = map // See redux/nodes.js for usage\n  }\n\n  withContext(context) {\n    return new ContextualNodeModel(this, context)\n  }\n\n  /**\n   * Get a node from the store by ID and optional type.\n   *\n   * @param {Object} args\n   * @param {string} args.id ID of the requested node\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the node\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {(Node|null)}\n   * @example\n   * // Using only the id\n   * getNodeById({ id: `123` })\n   * // Using id and type\n   * getNodeById({ id: `123`, type: `MyType` })\n   * // Providing page dependencies\n   * getNodeById({ id: `123` }, { path: `/` })\n   */\n  getNodeById(args, pageDependencies) {\n    const { id, type } = args || {}\n\n    const node = getNodeById(id)\n\n    let result\n    if (!node) {\n      result = null\n    } else if (!type) {\n      result = node\n    } else {\n      // @ts-ignore\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      result = nodeTypeNames.includes(node.internal.type) ? node : null\n    }\n\n    if (result) {\n      this.trackInlineObjectsInRootNode(node)\n    }\n\n    // @ts-ignore\n    return wrapNode(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  /**\n   * Get nodes from the store by IDs and optional type.\n   *\n   * @param {Object} args\n   * @param {string[]} args.ids IDs of the requested nodes\n   * @param {(string|GraphQLOutputType)} [args.type] Optional type of the nodes\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node[]}\n   * @example\n   * // Using only the id\n   * getNodeByIds({ ids: [`123`, `456`] })\n   *\n   * // Using id and type\n   * getNodeByIds({ ids: [`123`, `456`], type: `MyType` })\n   *\n   * // Providing page dependencies\n   * getNodeByIds({ ids: [`123`, `456`] }, { path: `/` })\n   */\n  getNodesByIds(args, pageDependencies) {\n    const { ids, type } = args || {}\n\n    const nodes = Array.isArray(ids)\n      ? ids.map(id => getNodeById(id)).filter(Boolean)\n      : []\n\n    let result\n    if (!nodes.length || !type) {\n      result = nodes\n    } else {\n      // @ts-ignore\n      const nodeTypeNames = toNodeTypeNames(this.schema, type)\n      // @ts-ignore\n      result = nodes.filter(node => nodeTypeNames.includes(node.internal.type))\n    }\n\n    if (result) {\n      result.forEach(node => this.trackInlineObjectsInRootNode(node))\n    }\n\n    // @ts-ignore\n    return wrapNodes(this.trackPageDependencies(result, pageDependencies))\n  }\n\n  async _query(args) {\n    let { query = {}, type, stats, tracer } = args || {}\n\n    // We don't support querying union types (yet?), because the combined types\n    // need not have any fields in common.\n    // @ts-ignore\n    const gqlType = typeof type === `string` ? this.schema.getType(type) : type\n    invariant(\n      !(gqlType instanceof GraphQLUnionType),\n      `Querying GraphQLUnion types is not supported.`\n    )\n\n    // @ts-ignore\n    const nodeTypeNames = toNodeTypeNames(this.schema, gqlType)\n\n    let runQueryActivity\n\n    // check if we can get node by id and skip\n    // more expensive query pipeline\n    if (\n      typeof query?.filter?.id?.eq !== `undefined` &&\n      Object.keys(query.filter).length === 1 &&\n      Object.keys(query.filter.id).length === 1\n    ) {\n      if (tracer) {\n        runQueryActivity = reporter.phantomActivity(`runQuerySimpleIdEq`, {\n          parentSpan: tracer.getParentActivity().span,\n        })\n        runQueryActivity.start()\n      }\n\n      // @ts-ignore\n      const nodeFoundById = this.getNodeById({\n        id: query.filter.id.eq,\n        type: gqlType,\n      })\n\n      if (runQueryActivity) {\n        runQueryActivity.end()\n      }\n\n      return {\n        gqlType,\n        entries: new GatsbyIterable(nodeFoundById ? [nodeFoundById] : []),\n        totalCount: async () => (nodeFoundById ? 1 : 0),\n      }\n    }\n\n    query = maybeConvertSortInputObjectToSortPath(query)\n\n    let materializationActivity\n    if (tracer) {\n      materializationActivity = reporter.phantomActivity(`Materialization`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      materializationActivity.start()\n    }\n    const fields = getQueryFields({\n      filter: query.filter,\n      sort: query.sort,\n      group: query.group,\n      distinct: query.distinct,\n      max: query.max,\n      min: query.min,\n      sum: query.sum,\n    })\n\n    const fieldsToResolve = determineResolvableFields(\n      // @ts-ignore\n      this.schemaComposer,\n      // @ts-ignore\n      this.schema,\n      gqlType,\n      fields\n    )\n\n    for (const nodeTypeName of nodeTypeNames) {\n      // @ts-ignore\n      const gqlNodeType = this.schema.getType(nodeTypeName)\n      await this.prepareNodes(gqlNodeType, fields, fieldsToResolve)\n    }\n\n    if (materializationActivity) {\n      materializationActivity.end()\n    }\n\n    if (tracer) {\n      runQueryActivity = reporter.phantomActivity(`runQuery`, {\n        parentSpan: tracer.getParentActivity().span,\n      })\n      runQueryActivity.start()\n    }\n\n    const { entries, totalCount } = await getDataStore().runQuery({\n      queryArgs: query,\n      // @ts-ignore\n      gqlSchema: this.schema,\n      // @ts-ignore\n      gqlComposer: this.schemaComposer,\n      gqlType,\n      resolvedFields: fieldsToResolve,\n      nodeTypeNames,\n      // @ts-ignore\n      filtersCache: this._filtersCache,\n      stats,\n    })\n\n    if (runQueryActivity) {\n      runQueryActivity.end()\n    }\n\n    return {\n      gqlType,\n      entries: entries.map(node => {\n        // With GatsbyIterable it happens lazily as we iterate\n        this.trackInlineObjectsInRootNode(node)\n        return node\n      }),\n      totalCount,\n    }\n  }\n\n  /**\n   * Get all nodes in the store, or all nodes of a specified type (optionally with limit/skip).\n   * Returns slice of result as iterable and total count of nodes.\n   *\n   * You can directly return its `entries` result in your resolver.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `limit` and `skip`)\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @return {Promise<Object>} Object containing `{ entries: GatsbyIterable, totalCount: () => Promise<number> }`\n   * @example\n   * // Get all nodes of a type\n   * const { entries, totalCount } = await findAll({ type: `MyType` })\n   *\n   * // Get all nodes of a type while filtering and sorting\n   * const { entries, totalCount } = await findAll({\n   *   type: `MyType`,\n   *   query: {\n   *     sort: { fields: [`date`], order: [`desc`] },\n   *     filter: { published: { eq: false } },\n   *   },\n   * })\n   *\n   * // The `entries` return value is a `GatsbyIterable` (check its TypeScript definition for more details) and allows you to execute array like methods like filter, map, slice, forEach. Calling these methods is more performant than first turning the iterable into an array and then calling the array methods.\n   * const { entries, totalCount } = await findAll({ type: `MyType` })\n   *\n   * const count = await totalCount()\n   * const filteredEntries = entries.filter(entry => entry.published)\n   *\n   * // However, if a method is not available on the `GatsbyIterable` you can turn it into an array first.\n   * const filteredEntries = entries.filter(entry => entry.published)\n   * return Array.from(posts).length\n   */\n  async findAll(args) {\n    const { gqlType, ...result } = await this._query(args)\n\n    this.trackPageDependencies(result.entries)\n    return {\n      // @ts-ignore\n      entries: wrapNodes(result.entries),\n      totalCount: result.totalCount,\n    }\n  }\n\n  /**\n   * Get one node in the store. Only returns the first result. When possible, always use this method instead of fetching all nodes and then filtering them. `findOne` is more performant in that regard.\n   *\n   * @param {*} args\n   * @param {Object} args.query Query arguments (e.g. `filter`). Doesn't support `sort`, `limit`, `skip`.\n   * @param {(string|GraphQLOutputType)} args.type Type\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Promise<Node>}\n   * @example\n   * // Get one node of type `MyType` by its title\n   * const node = await findOne({\n   *   type: `MyType`,\n   *   query: { filter: { title: { eq: `My Title` } } },\n   * })\n   */\n  async findOne(args, pageDependencies = {}) {\n    const { query = {} } = args\n    if (query.sort?.fields?.length > 0) {\n      // If we support sorting and return the first node based on sorting\n      // we'll have to always track connection not an individual node\n      throw new Error(\n        `nodeModel.findOne() does not support sorting. Use nodeModel.findAll({ query: { limit: 1 } }) instead.`\n      )\n    }\n    const { entries } = await this._query({\n      ...args,\n      query: { ...query, skip: 0, limit: 1, sort: undefined },\n    })\n    const result = Array.from(entries)\n    const first = result[0] ?? null\n\n    // @ts-ignore\n    return wrapNode(this.trackPageDependencies(first, pageDependencies))\n  }\n\n  prepareNodes(type, queryFields, fieldsToResolve) {\n    const typeName = type.name\n    // @ts-ignore\n    if (!this._prepareNodesQueues[typeName]) {\n      // @ts-ignore\n      this._prepareNodesQueues[typeName] = []\n    }\n\n    // @ts-ignore\n    this._prepareNodesQueues[typeName].push({\n      queryFields,\n      fieldsToResolve,\n    })\n\n    // @ts-ignore\n    if (!this._prepareNodesPromises[typeName]) {\n      // @ts-ignore\n      this._prepareNodesPromises[typeName] = new Promise(resolve => {\n        process.nextTick(async () => {\n          await this._doResolvePrepareNodesQueue(type)\n          resolve(null)\n        })\n      })\n    }\n\n    // @ts-ignore\n    return this._prepareNodesPromises[typeName]\n  }\n\n  async _doResolvePrepareNodesQueue(type) {\n    const typeName = type.name\n    // @ts-ignore\n    const queue = this._prepareNodesQueues[typeName]\n    // @ts-ignore\n    this._prepareNodesQueues[typeName] = []\n    // @ts-ignore\n    this._prepareNodesPromises[typeName] = null\n\n    const { queryFields, fieldsToResolve } = queue.reduce(\n      (\n        { queryFields, fieldsToResolve },\n        { queryFields: nextQueryFields, fieldsToResolve: nextFieldsToResolve }\n      ) => {\n        return {\n          queryFields: _.merge(queryFields, nextQueryFields),\n          fieldsToResolve: _.merge(fieldsToResolve, nextFieldsToResolve),\n        }\n      },\n      {\n        queryFields: {},\n        fieldsToResolve: {},\n      }\n    )\n\n    const actualFieldsToResolve = deepObjectDifference(\n      fieldsToResolve,\n      // @ts-ignore\n      this._preparedNodesCache.get(typeName) || {}\n    )\n\n    if (!_.isEmpty(actualFieldsToResolve)) {\n      const {\n        schemaCustomization: { context: customContext },\n      } = store.getState()\n      const resolvedNodes = new Map()\n      for (const node of getDataStore().iterateNodesByType(typeName)) {\n        this.trackInlineObjectsInRootNode(node)\n        const resolvedFields = await resolveRecursive(\n          this,\n          // @ts-ignore\n          this.schemaComposer,\n          // @ts-ignore\n          this.schema,\n          node,\n          type,\n          queryFields,\n          actualFieldsToResolve,\n          customContext\n        )\n\n        resolvedNodes.set(node.id, resolvedFields)\n      }\n      if (resolvedNodes.size) {\n        await saveResolvedNodes(typeName, resolvedNodes)\n      }\n      // @ts-ignore\n      this._preparedNodesCache.set(\n        typeName,\n        _.merge(\n          {},\n          // @ts-ignore\n          this._preparedNodesCache.get(typeName) || {},\n          actualFieldsToResolve\n        )\n      )\n    }\n  }\n\n  /**\n   * Get the names of all node types in the store.\n   *\n   * @returns {string[]}\n   */\n  getTypes() {\n    return getTypes()\n  }\n\n  /**\n   * Adds link between inline objects/arrays contained in Node object\n   * and that Node object.\n   * @param {Node} node Root Node\n   */\n  trackInlineObjectsInRootNode(node) {\n    // @ts-ignore\n    if (!this._trackedRootNodes.has(node)) {\n      addRootNodeToInlineObject(\n        // @ts-ignore\n        this._rootNodeMap,\n        node,\n        node.id,\n        true,\n        new Set()\n      )\n      // @ts-ignore\n      this._trackedRootNodes.add(node)\n    }\n  }\n\n  /**\n   * Finds top most ancestor of node that contains passed Object or Array\n   * @param {(Object|Array)} obj Object/Array belonging to Node object or Node object\n   * @param {nodePredicate} [predicate] Optional callback to check if ancestor meets defined conditions\n   * @returns {Node} Top most ancestor if predicate is not specified\n   * or first node that meet predicate conditions if predicate is specified\n   */\n  findRootNodeAncestor(obj, predicate = null) {\n    let iterations = 0\n    // @ts-ignore\n    let ids = this._rootNodeMap.get(obj)\n    if (!ids) {\n      ids = []\n    }\n    if (obj?.parent) {\n      ids.push(obj.parent)\n    }\n    let matchingRoot = null\n\n    if (ids) {\n      for (const id of ids) {\n        let tracked = getNodeById(id)\n\n        if (tracked) {\n          const visited = new Set()\n\n          while (iterations++ < 100) {\n            // @ts-ignore\n            if (predicate && predicate(tracked)) {\n              return tracked\n            }\n\n            if (visited.has(tracked)) {\n              reporter.error(\n                `It looks like you have a node that's set its parent as itself:\\n\\n` +\n                  tracked\n              )\n              break\n            }\n            visited.add(tracked)\n\n            const parent = getNodeById(tracked.parent)\n\n            if (!parent) {\n              break\n            }\n\n            tracked = parent\n          }\n\n          if (tracked && !predicate) {\n            // @ts-ignore\n            matchingRoot = tracked\n          }\n        }\n      }\n    }\n\n    return matchingRoot\n  }\n\n  /**\n   * Given a result, that's either a single node or an array of them, track them\n   * using pageDependencies. Defaults to tracking according to current resolver\n   * path. Returns the result back.\n   *\n   * @param {Node | Node[]} result\n   * @param {PageDependencies} [pageDependencies]\n   * @returns {Node | Node[]}\n   */\n  trackPageDependencies(result) {\n    return result\n  }\n\n  /**\n   * Utility to get a field value from a node, even when that value needs to be materialized first (e.g. nested field that was connected via @link directive)\n   * @param {Node} node\n   * @param {string} fieldPath\n   * @returns {any}\n   * @example\n   * // Example: Via schema customization the author ID is linked to the Author type\n   * const blogPostNode = {\n   *   author: 'author-id-1',\n   *   // Rest of node fields...\n   * }\n   *\n   * getFieldValue(blogPostNode, 'author.name')\n   */\n  getFieldValue = async (node, fieldPath) => {\n    const fieldToResolve = pathToObject(fieldPath)\n    const typeName = node.internal.type\n    // @ts-ignore\n    const type = this.schema.getType(typeName)\n\n    await this.prepareNodes(type, fieldToResolve, fieldToResolve)\n\n    return getMaybeResolvedValue(node, fieldPath, typeName)\n  }\n}\n\nclass ContextualNodeModel {\n  constructor(rootNodeModel, context) {\n    // @ts-ignore\n    this.nodeModel = rootNodeModel\n    // @ts-ignore\n    this.context = context\n  }\n\n  withContext(context) {\n    // @ts-ignore\n    return new ContextualNodeModel(this.nodeModel, {\n      // @ts-ignore\n      ...this.context,\n      ...context,\n    })\n  }\n\n  _getFullDependencies(pageDependencies) {\n    return {\n      // @ts-ignore\n      path: this.context.path,\n      ...(pageDependencies || {}),\n    }\n  }\n\n  getNodeById(args, pageDependencies) {\n    // @ts-ignore\n    return this.nodeModel.getNodeById(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  getNodesByIds(args, pageDependencies) {\n    // @ts-ignore\n    return this.nodeModel.getNodesByIds(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findOne(args, pageDependencies) {\n    // @ts-ignore\n    return this.nodeModel.findOne(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  findAll(args, pageDependencies) {\n    // @ts-ignore\n    return this.nodeModel.findAll(\n      args,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  prepareNodes(...args) {\n    // @ts-ignore\n    return this.nodeModel.prepareNodes(...args)\n  }\n\n  getTypes(...args) {\n    // @ts-ignore\n    return this.nodeModel.getTypes(...args)\n  }\n\n  trackInlineObjectsInRootNode(...args) {\n    // @ts-ignore\n    return this.nodeModel.trackInlineObjectsInRootNode(...args)\n  }\n\n  findRootNodeAncestor(...args) {\n    // @ts-ignore\n    return this.nodeModel.findRootNodeAncestor(...args)\n  }\n\n  createPageDependency(...args) {\n    // @ts-ignore\n    return this.nodeModel.createPageDependency(...args)\n  }\n\n  trackPageDependencies(result, pageDependencies) {\n    // @ts-ignore\n    return this.nodeModel.trackPageDependencies(\n      result,\n      this._getFullDependencies(pageDependencies)\n    )\n  }\n\n  // @ts-ignore\n  getFieldValue = (...args) => this.nodeModel.getFieldValue(...args)\n}\n\nconst getNodeById = id => (id != null ? getNode(id) : null)\n\nconst getQueryFields = ({ filter, sort, group, distinct, max, min, sum }) => {\n  const filterFields = filter ? dropQueryOperators(filter) : {}\n  const sortFields = (sort && sort.fields) || []\n\n  if (group && !Array.isArray(group)) {\n    group = [group]\n  } else if (group == null) {\n    group = []\n  }\n\n  if (distinct && !Array.isArray(distinct)) {\n    distinct = [distinct]\n  } else if (distinct == null) {\n    distinct = []\n  }\n\n  if (max && !Array.isArray(max)) {\n    max = [max]\n  } else if (max == null) {\n    max = []\n  }\n\n  if (min && !Array.isArray(min)) {\n    min = [min]\n  } else if (min == null) {\n    min = []\n  }\n\n  if (sum && !Array.isArray(sum)) {\n    sum = [sum]\n  } else if (sum == null) {\n    sum = []\n  }\n\n  return _.merge(\n    filterFields,\n    ...sortFields.map(pathToObject),\n    ...group.map(pathToObject),\n    ...distinct.map(pathToObject),\n    ...max.map(pathToObject),\n    ...min.map(pathToObject),\n    ...sum.map(pathToObject)\n  )\n}\n\nconst pathToObject = path => {\n  if (path && typeof path === `string`) {\n    // @ts-ignore\n    return path.split(`.`).reduceRight((acc, key) => {\n      return { [key]: acc }\n    }, true)\n  }\n  return {}\n}\n\nconst dropQueryOperators = filter =>\n  Object.keys(filter).reduce((acc, key) => {\n    const value = filter[key]\n    const k = Object.keys(value)[0]\n    const v = value[k]\n    if (_.isPlainObject(value) && _.isPlainObject(v)) {\n      acc[key] =\n        k === `elemMatch` ? dropQueryOperators(v) : dropQueryOperators(value)\n    } else {\n      acc[key] = true\n    }\n    return acc\n  }, {})\n\nconst getFields = (schema, type, node) => {\n  if (!isAbstractType(type)) {\n    return type.getFields()\n  }\n\n  // @ts-ignore\n  const concreteType = type.resolveType(node)\n  return schema.getType(concreteType).getFields()\n}\n\nasync function resolveRecursive(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  type,\n  queryFields,\n  fieldsToResolve,\n  customContext\n) {\n  const gqlFields = getFields(schema, type, node)\n  const resolvedFields = {}\n  for (const fieldName of Object.keys(fieldsToResolve)) {\n    const fieldToResolve = fieldsToResolve[fieldName]\n    const queryField = queryFields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlNonNullType = getNullableType(gqlField.type)\n    const gqlFieldType = getNamedType(gqlField.type)\n    let innerValue = await resolveField(\n      nodeModel,\n      schemaComposer,\n      schema,\n      node,\n      gqlField,\n      fieldName,\n      customContext\n    )\n    if (gqlField && innerValue != null) {\n      if (\n        isCompositeType(gqlFieldType) &&\n        !(gqlNonNullType instanceof GraphQLList)\n      ) {\n        innerValue = await resolveRecursive(\n          nodeModel,\n          schemaComposer,\n          schema,\n          innerValue,\n          gqlFieldType,\n          queryField,\n          _.isObject(fieldToResolve) ? fieldToResolve : queryField,\n          customContext\n        )\n      } else if (\n        isCompositeType(gqlFieldType) &&\n        (_.isArray(innerValue) || innerValue instanceof GatsbyIterable) &&\n        gqlNonNullType instanceof GraphQLList\n      ) {\n        innerValue = await Promise.all(\n          innerValue.map(item =>\n            item == null\n              ? item\n              : resolveRecursive(\n                  nodeModel,\n                  schemaComposer,\n                  schema,\n                  item,\n                  gqlFieldType,\n                  queryField,\n                  _.isObject(fieldToResolve) ? fieldToResolve : queryField,\n                  customContext\n                )\n          )\n        )\n      }\n    }\n    if (innerValue != null) {\n      resolvedFields[fieldName] = innerValue\n    }\n  }\n\n  for (const fieldName of Object.keys(queryFields)) {\n    if (!fieldsToResolve[fieldName] && node[fieldName]) {\n      // It is possible that this field still has a custom resolver\n      // See https://github.com/gatsbyjs/gatsby/issues/27368\n      resolvedFields[fieldName] = await resolveField(\n        nodeModel,\n        schemaComposer,\n        schema,\n        node,\n        gqlFields[fieldName],\n        fieldName,\n        customContext\n      )\n    }\n  }\n\n  // @ts-ignore\n  return _.pickBy(resolvedFields, (value, key) => queryFields[key])\n}\nlet withResolverContext\nfunction resolveField(\n  nodeModel,\n  schemaComposer,\n  schema,\n  node,\n  gqlField,\n  fieldName,\n  customContext\n) {\n  if (!gqlField?.resolve) {\n    return node[fieldName]\n  }\n\n  // We require this inline as there's a circular dependency from context back to this file.\n  // https://github.com/gatsbyjs/gatsby/blob/9d33b107d167e3e9e2aa282924a0c409f6afd5a0/packages/gatsby/src/schema/context.ts#L5\n  if (!withResolverContext) {\n    withResolverContext = preferDefault(require(`./context`))\n  }\n\n  return gqlField.resolve(\n    node,\n    gqlField.args.reduce((acc, arg) => {\n      acc[arg.name] = arg.defaultValue\n      return acc\n    }, {}),\n    withResolverContext({\n      schema,\n      schemaComposer,\n      nodeModel,\n      customContext,\n    }),\n    {\n      fieldName,\n      schema,\n      returnType: gqlField.type,\n    }\n  )\n}\n\nconst determineResolvableFields = (\n  schemaComposer,\n  schema,\n  type,\n  fields,\n  isNestedAndParentNeedsResolve = false\n) => {\n  const fieldsToResolve = {}\n  const gqlFields = type.getFields()\n  Object.keys(fields).forEach(fieldName => {\n    const field = fields[fieldName]\n    const gqlField = gqlFields[fieldName]\n    const gqlFieldType = getNamedType(gqlField.type)\n    const typeComposer = schemaComposer.getAnyTC(type.name)\n\n    const needsResolve = fieldNeedToResolve({\n      schema,\n      gqlType: type,\n      typeComposer,\n      schemaComposer,\n      fieldName,\n    })\n\n    if (_.isObject(field) && gqlField) {\n      const innerResolved = determineResolvableFields(\n        schemaComposer,\n        schema,\n        gqlFieldType,\n        field,\n        isNestedAndParentNeedsResolve || needsResolve\n      )\n      if (!_.isEmpty(innerResolved)) {\n        fieldsToResolve[fieldName] = innerResolved\n      }\n    }\n\n    if (!fieldsToResolve[fieldName] && needsResolve) {\n      fieldsToResolve[fieldName] = true\n    }\n    if (!fieldsToResolve[fieldName] && isNestedAndParentNeedsResolve) {\n      // If parent field needs to be resolved - all nested fields should be added as well\n      // See https://github.com/gatsbyjs/gatsby/issues/26056\n      fieldsToResolve[fieldName] = true\n    }\n  })\n  return fieldsToResolve\n}\n\nconst addRootNodeToInlineObject = (\n  rootNodeMap,\n  data,\n  nodeId,\n  isNode /* : boolean */,\n  path /* : Set<mixed> */\n) /* : void */ => {\n  const isPlainObject = _.isPlainObject(data)\n\n  if (isPlainObject || _.isArray(data)) {\n    if (path.has(data)) return\n    path.add(data)\n\n    _.each(data, (o, key) => {\n      if (!isNode || key !== `internal`) {\n        addRootNodeToInlineObject(rootNodeMap, o, nodeId, false, path)\n      }\n    })\n\n    // don't need to track node itself\n    if (!isNode) {\n      let nodeIds = rootNodeMap.get(data)\n      if (!nodeIds) {\n        nodeIds = new Set([nodeId])\n      } else {\n        nodeIds.add(nodeId)\n      }\n      rootNodeMap.set(data, nodeIds)\n    }\n  }\n}\n\nconst saveResolvedNodes = (typeName, resolvedNodes) => {\n  store.dispatch({\n    type: `SET_RESOLVED_NODES`,\n    payload: {\n      key: typeName,\n      nodes: resolvedNodes,\n    },\n  })\n}\n\nconst deepObjectDifference = (from, to) => {\n  const result = {}\n  Object.keys(from).forEach(key => {\n    const toValue = to[key]\n    if (toValue) {\n      if (_.isPlainObject(toValue)) {\n        const deepResult = deepObjectDifference(from[key], toValue)\n        if (!_.isEmpty(deepResult)) {\n          result[key] = deepResult\n        }\n      }\n    } else {\n      result[key] = from[key]\n    }\n  })\n  return result\n}\n\nexport { LocalNodeModel }\n"],"mappings":"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"}