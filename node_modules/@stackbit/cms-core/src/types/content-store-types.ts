import * as StackbitTypes from '@stackbit/types';
import { Model } from '@stackbit/sdk';
import { Asset, Document } from './content-store-documents';
import { BackCompatContentSourceInterface } from '../utils/backward-compatibility';

export interface ContentSourceData {
    /* Internal content source id computed by concatenating srcType and srcProjectId */
    id: string;
    /* The content source instance loaded from stackbitConfig.contentSources */
    instance: BackCompatContentSourceInterface;
    destroyed: boolean;
    version: { interfaceVersion: string; contentSourceVersion: string };
    srcType: string;
    srcProjectId: string;
    locales?: StackbitTypes.Locale[];
    defaultLocaleCode?: string;
    /* Array of extended and validated Models */
    models: Model[];
    /* Map of extended and validated Models by model name */
    modelMap: Record<string, Model>;
    /* Array of original Models (as provided by content source)  */
    csiSchema: StackbitTypes.Schema;
    csiModels: StackbitTypes.Model[];
    /* Map of original Models (as provided by content source) by model name */
    csiModelMap: Record<string, StackbitTypes.Model>;
    /* Array of original content source Documents */
    csiDocuments: StackbitTypes.Document[];
    /* Map of original content source Documents by document ID */
    csiDocumentMap: Record<string, StackbitTypes.Document>;
    /* Array of converted content-store Documents */
    documents: Document[];
    /* Map of converted content-store Documents by document ID */
    documentMap: Record<string, Document>;
    /* Array of original content source Assets */
    csiAssets: StackbitTypes.Asset[];
    /* Map of original content source Assets by asset ID */
    csiAssetMap: Record<string, StackbitTypes.Asset>;
    /* Array of converted content-store Assets */
    assets: Asset[];
    /* Map of converted content-store Assets by asset ID */
    assetMap: Record<string, Asset>;
    // Array of converted scheduled actions (publishes)
    scheduledActions: StackbitTypes.ScheduledAction[];
    /* Map of advanced features to enable in the studio client */
    enabledFeatures: {
        scheduledActions: boolean;
    };
}

export interface UploadAssetData {
    url: string;
    data?: string;
    metadata: {
        name: string;
        type: string;
    };
}

export interface ContentChangeResultItem {
    srcType: string;
    srcProjectId: string;
    srcObjectId: string;
}

export interface ContentChangeResultScheduledAction {
    srcType: string;
    srcProjectId: string;
    scheduledActionId: string;
}

export interface ContentChangeResult {
    updatedDocuments: ContentChangeResultItem[];
    updatedAssets: ContentChangeResultItem[];
    updatedScheduledActions: ContentChangeResultScheduledAction[];
    deletedDocuments: ContentChangeResultItem[];
    deletedAssets: ContentChangeResultItem[];
    deletedScheduledActions: ContentChangeResultScheduledAction[];
}

export interface User {
    name: string;
    email: string;
    connections: {
        type: string;
        [key: string]: any;
    }[];
}

export interface ValidationError {
    message: string;
    srcType: string;
    srcProjectId: string;
    srcObjectType: string;
    srcObjectId: string;
    fieldPath: (string | number)[];
    isUniqueValidation?: boolean;
}

export interface HasAccessResult {
    hasConnection: boolean;
    hasPermissions: boolean;
    contentSources: {
        srcType: string;
        srcProjectId: string;
        hasConnection: boolean;
        hasPermissions: boolean;
    }[];
}

export interface CrossReferenceData {
    refId: string;
    refSrcType: string;
    refProjectId: string;
}

export interface ContentStoreLocale {
    srcType: string;
    srcProjectId: string;
    locales: string[];
    defaultLocale: string | undefined;
}
