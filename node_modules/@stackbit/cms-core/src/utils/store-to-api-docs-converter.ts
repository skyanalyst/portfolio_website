import _ from 'lodash';
import path from 'path';
import { omitByNil, omitByUndefined } from '@stackbit/utils';
import * as CSITypes from '@stackbit/types';
import * as ContentStoreTypes from '../types';
import { APICustomActionField, APICustomActionObject } from '../types';

export function mapDocumentsToLocalizedApiObjects({
    documents,
    locale,
    delegate
}: {
    documents: ContentStoreTypes.Document[];
    locale?: string;
    delegate: CSITypes.ConfigDelegate;
}): ContentStoreTypes.APIDocumentObject[] {
    return documents.map((document) =>
        documentToLocalizedApiObject({
            document,
            locale,
            delegate
        })
    );
}

function documentToLocalizedApiObject({
    document,
    locale,
    delegate
}: {
    document: ContentStoreTypes.Document;
    locale?: string;
    delegate: CSITypes.ConfigDelegate;
}): ContentStoreTypes.APIDocumentObject {
    const { type, fields, getPreview, getDocumentActions, ...rest } = document;
    return omitByUndefined({
        // for historical reasons, stackbit app works with { type: 'object' } not { type: 'document' }
        type: 'object',
        ...rest,
        srcObjectLabel: getPreview({ delegate, locale }).previewTitle,
        actions: getDocumentActions?.(),
        fields: toLocalizedAPIFields({ docFields: fields, delegate, locale })
    });
}

function toLocalizedAPIFields({
    docFields,
    delegate,
    locale
}: {
    docFields: Record<string, ContentStoreTypes.DocumentField>;
    delegate: CSITypes.ConfigDelegate;
    locale?: string;
}): Record<string, ContentStoreTypes.DocumentFieldAPI> {
    return _.mapValues(docFields, (docField) => {
        return omitByUndefined(
            toLocalizedAPIField({
                docField,
                delegate,
                locale
            })
        );
    });
}

/**
 * For historical reasons, Stackit app works with fields that can have only one
 * locale. When Stackbit app fetches documents, it passes the current locale.
 * This function converts the internal document field (DocumentField), possibly
 * with nested locales, into an API field (DocumentFieldAPI) with single locale.
 *
 * DocumentField:
 * {
 *   type: "string",
 *   localized: true,
 *   locales: {
 *       'en-US': {
 *           locale: 'en-US',
 *           value: 'hello
 *       },
 *       'fr-FR': {
 *           locale: 'fr-FR',
 *           valie: 'bonjour'
 *       }
 *   }
 * }
 *
 * DocumentFieldAPI:
 * {
 *   type: "string",
 *   localized: true,
 *   locale: 'fr-FR',
 *   value: 'bonjour'
 * }
 *
 * It also does some conversions between field types:
 * type: 'model' => 'object',
 * type: 'reference' => 'unresolved_reference',
 * refType: 'asset' => 'image'
 * refType: 'document' => 'object'
 */
function toLocalizedAPIField({
    docField,
    delegate,
    locale,
    isListItem = false
}: {
    docField: ContentStoreTypes.DocumentField;
    delegate: CSITypes.ConfigDelegate;
    locale?: string;
    isListItem?: boolean;
}): ContentStoreTypes.DocumentFieldAPI {
    type ToBoolean<T extends boolean | undefined> = T extends true ? true : false;
    function localeFields<T extends boolean | undefined>(localized: T): null | { localized: false } | { localized: true; locale: string } {
        const isLocalized = !!localized as ToBoolean<T>;
        if (isListItem) {
            return null;
        }
        if (!isLocalized) {
            return {
                localized: false
            };
        }
        if (!locale) {
            return null;
        }
        return {
            localized: true,
            locale: locale
        };
    }
    const { getFieldActions, ...restDocField } = docField;
    const fieldActions = getFieldActions?.({ locale: docField.localized ? locale : undefined });
    docField = restDocField;
    switch (docField.type) {
        case 'string':
        case 'text':
        case 'url':
        case 'slug':
        case 'html':
        case 'number':
        case 'boolean':
        case 'enum':
        case 'date':
        case 'datetime':
        case 'color':
        case 'style': {
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                return {
                    ...base,
                    ...localeProps,
                    ...localeFields(localized),
                    actions: fieldActions
                } as ContentStoreTypes.DocumentStringLikeFieldAPI;
            }
            return {
                ...docField,
                ...localeFields(docField.localized),
                actions: fieldActions
            };
        }
        case 'file':
        case 'json':
        case 'markdown':
        case 'richText': {
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                if (localeProps) {
                    return {
                        ...base,
                        ...localeProps,
                        ...localeFields(localized),
                        actions: fieldActions
                    };
                }
                return {
                    ...base,
                    isUnset: true,
                    ...localeFields(localized),
                    actions: fieldActions
                };
            }
            return {
                ...docField,
                ...localeFields(docField.localized),
                actions: fieldActions
            };
        }
        case 'image': {
            let result: ContentStoreTypes.DocumentFieldAPI;
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                if (localeProps) {
                    const fields = toLocalizedAPIFields({
                        docFields: localeProps.fields,
                        delegate,
                        locale
                    }) as ContentStoreTypes.ImageFieldsAPI;
                    result = {
                        ...base,
                        ...localeProps,
                        fields,
                        ...localeFields(localized),
                        actions: fieldActions
                    };
                } else {
                    result = {
                        ...base,
                        isUnset: true,
                        ...localeFields(localized),
                        actions: fieldActions
                    };
                }
            } else {
                if (docField.isUnset) {
                    result = {
                        ...docField,
                        type: 'image',
                        ...localeFields(docField.localized),
                        actions: fieldActions
                    };
                } else {
                    const fields = toLocalizedAPIFields({
                        docFields: docField.fields,
                        delegate,
                        locale
                    }) as ContentStoreTypes.ImageFieldsAPI;
                    result = {
                        ...docField,
                        type: 'image',
                        fields,
                        ...localeFields(docField.localized),
                        actions: fieldActions
                    };
                }
            }
            return result;
        }
        case 'object': {
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                if (localeProps) {
                    const { fields, getPreview, getObjectActions, locale } = localeProps;
                    const objectActions = getObjectActions?.();
                    return {
                        ...base,
                        ...localeFields(localized),
                        srcObjectLabel:
                            getPreview({
                                delegate,
                                locale
                            }).previewTitle ?? (isListItem ? 'Item' : 'Object'),
                        actions: concatObjectAndFieldActions(objectActions, fieldActions),
                        fields: toLocalizedAPIFields({
                            docFields: fields,
                            delegate,
                            locale
                        })
                    };
                }
                return {
                    ...base,
                    ...localeFields(localized),
                    actions: fieldActions,
                    isUnset: true
                };
            }
            if (docField.isUnset) {
                return {
                    ...docField,
                    type: 'object',
                    ...localeFields(docField.localized),
                    actions: fieldActions
                };
            }
            const { fields, getPreview, getObjectActions, ...rest } = docField;
            const objectActions = getObjectActions?.();
            return {
                ...rest,
                type: 'object',
                srcObjectLabel:
                    getPreview({
                        delegate,
                        locale
                    }).previewTitle ?? (isListItem ? 'Item' : 'Object'),
                actions: concatObjectAndFieldActions(objectActions, fieldActions),
                fields: toLocalizedAPIFields({
                    docFields: fields,
                    delegate,
                    locale
                }),
                ...localeFields(docField.localized)
            };
        }
        case 'model': {
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                if (localeProps) {
                    const { fields, getPreview, getObjectActions, ...rest } = localeProps;
                    const objectActions = getObjectActions?.();
                    return {
                        ...base,
                        ...rest,
                        type: 'object', // API uses 'object' not 'model'
                        ...localeFields(localized),
                        srcObjectLabel: getPreview({
                            delegate,
                            locale
                        }).previewTitle,
                        actions: concatObjectAndFieldActions(objectActions, fieldActions),
                        fields: toLocalizedAPIFields({
                            docFields: fields,
                            delegate,
                            locale
                        })
                    };
                }
                return {
                    ...base,
                    type: 'object', // API uses 'object' not 'model'
                    isUnset: true,
                    ...localeFields(localized),
                    actions: fieldActions
                };
            }
            if (docField.isUnset) {
                return {
                    ...docField,
                    type: 'object', // API uses 'object' not 'model'
                    ...localeFields(docField.localized),
                    actions: fieldActions
                };
            } else {
                const { fields, getPreview, getObjectActions, ...rest } = docField;
                const objectActions = getObjectActions?.();
                return {
                    ...rest,
                    type: 'object', // API uses 'object' not 'model'
                    ...localeFields(docField.localized),
                    srcObjectLabel: getPreview({
                        delegate,
                        locale
                    }).previewTitle,
                    actions: concatObjectAndFieldActions(objectActions, fieldActions),
                    fields: toLocalizedAPIFields({
                        docFields: fields,
                        delegate,
                        locale
                    })
                };
            }
        }
        case 'reference': {
            if (docField.localized) {
                const { type, refType, localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                // if reference field isUnset === true, it behaves like a regular object
                if (!localeProps) {
                    return {
                        type: refType === 'asset' ? 'image' : 'object',
                        isUnset: true,
                        ...base,
                        ...localeFields(localized),
                        actions: fieldActions
                    } as ContentStoreTypes.DocumentObjectFieldAPI | ContentStoreTypes.DocumentImageFieldAPI;
                }
                return {
                    type: 'unresolved_reference',
                    refType: refType === 'asset' ? 'image' : 'object',
                    ...base,
                    ...localeProps,
                    ...localeFields(localized),
                    actions: fieldActions
                };
            }
            const { type, refType, ...base } = docField;
            if (base.isUnset) {
                return {
                    type: refType === 'asset' ? 'image' : 'object',
                    ...base,
                    ...localeFields(docField.localized),
                    actions: fieldActions
                };
            }
            return {
                type: 'unresolved_reference',
                refType: refType === 'asset' ? 'image' : 'object',
                ...base,
                ...localeFields(docField.localized),
                actions: fieldActions
            };
        }
        case 'cross-reference': {
            if (docField.localized) {
                const { type, refType, localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                // if reference field isUnset === true, it behaves like a regular object
                if (!localeProps) {
                    return {
                        type: 'object',
                        isUnset: true,
                        ...base,
                        ...localeFields(localized),
                        actions: fieldActions
                    };
                }
                return {
                    type: 'cross-reference',
                    refType: refType,
                    ...base,
                    ...localeProps,
                    ...localeFields(localized),
                    actions: fieldActions
                };
            }
            const { type, refType, ...base } = docField;
            if (base.isUnset) {
                return {
                    type: 'object',
                    ...base,
                    ...localeFields(docField.localized),
                    actions: fieldActions
                };
            }
            return {
                type: 'cross-reference',
                refType: refType,
                ...base,
                ...localeFields(docField.localized),
                actions: fieldActions
            };
        }
        case 'list': {
            if (docField.localized) {
                const { localized, locales, ...base } = docField;
                const localeProps = locales && locale ? locales[locale] : undefined;
                return {
                    ...base,
                    ...localeProps,
                    actions: fieldActions,
                    items: (localeProps?.items ?? []).map(
                        (field) =>
                            toLocalizedAPIField({
                                docField: field,
                                delegate,
                                locale,
                                isListItem: true
                            }) as ContentStoreTypes.DocumentListFieldItemsAPI
                    ),
                    ...localeFields(localized)
                };
            }
            const { items, ...rest } = docField;
            return {
                ...rest,
                ...localeFields(docField.localized),
                actions: fieldActions,
                items: items.map(
                    (field) =>
                        toLocalizedAPIField({
                            docField: field,
                            delegate,
                            locale,
                            isListItem: true
                        }) as ContentStoreTypes.DocumentListFieldItemsAPI
                )
            };
        }
        default: {
            const _exhaustiveCheck: never = docField;
            console.error(`toLocalizedAPIField _exhaustiveCheck failed, docField.type: ${docField['type']}`);
            return _exhaustiveCheck;
        }
    }
}

export function mapAssetsToLocalizedApiImages(
    assets: ContentStoreTypes.Asset[],
    staticAssetsPublicPath: string,
    locale?: string
): ContentStoreTypes.APIImageObject[] {
    return assets.map((asset) => assetToLocalizedApiImage(asset, staticAssetsPublicPath, locale));
}

function assetToLocalizedApiImage(asset: ContentStoreTypes.Asset, staticAssetsPublicPath: string, locale?: string): ContentStoreTypes.APIImageObject {
    const { type, fields, ...rest } = asset;
    return {
        type: 'image',
        ...rest,
        fields: localizeAssetFields(fields, staticAssetsPublicPath, locale)
    };
}

function localizeAssetFields(assetFields: ContentStoreTypes.AssetFields, staticAssetsPublicPath: string, locale?: string): ContentStoreTypes.AssetFieldsAPI {
    const fields: ContentStoreTypes.AssetFieldsAPI = {
        title: {
            type: 'string' as const,
            value: null as any
        },
        url: {
            type: 'string' as const,
            value: null as any
        }
    };
    const titleField = assetFields.title;
    if (titleField.localized) {
        if (locale) {
            fields.title = {
                type: 'string',
                value: titleField.locales?.[locale]?.value ?? null,
                localized: true,
                locale: locale
            };
        }
    } else {
        fields.title.value = titleField.value;
    }
    const assetFileField = assetFields.file;
    if (assetFileField.localized) {
        if (locale) {
            const url = assetFileField.locales?.[locale]?.url ?? null;
            fields.url = {
                type: 'string',
                value: url ? replaceAssetUrlIfNeeded(staticAssetsPublicPath, url) : url,
                localized: true,
                locale: locale
            };
        }
    } else {
        fields.url.value = replaceAssetUrlIfNeeded(staticAssetsPublicPath, assetFileField.url);
    }
    return fields;
}

export function mapStoreAssetsToAPIAssets(assets: ContentStoreTypes.Asset[], staticAssetsPublicPath: string, locale?: string): ContentStoreTypes.APIAsset[] {
    return assets.map((asset) => storeAssetToAPIAsset(asset, staticAssetsPublicPath, locale)).filter((asset): asset is ContentStoreTypes.APIAsset => !!asset);
}

function storeAssetToAPIAsset(asset: ContentStoreTypes.Asset, staticAssetsPublicPath: string, locale?: string): ContentStoreTypes.APIAsset | null {
    const assetTitleField = asset.fields.title;
    const localizedTitleField = assetTitleField.localized ? assetTitleField.locales?.[locale!] : assetTitleField;
    const assetFileField = asset.fields.file;
    const localizedFileField = assetFileField.localized ? assetFileField.locales?.[locale!] : assetFileField;
    if (!localizedFileField) {
        return null;
    }
    return {
        objectId: asset.srcObjectId,
        createdAt: asset.createdAt,
        url: replaceAssetUrlIfNeeded(staticAssetsPublicPath, localizedFileField.url) ?? staticAssetsPublicPath,
        ...omitByNil({
            title: localizedTitleField?.value ?? undefined,
            fileName: localizedFileField.fileName,
            contentType: localizedFileField.contentType,
            size: localizedFileField.size,
            width: localizedFileField.dimensions?.width,
            height: localizedFileField.dimensions?.height
        })
    };
}

function replaceAssetUrlIfNeeded(staticAssetsPublicPath: string, value: string | undefined) {
    let url = value;
    const normalizedUrl = url?.toLowerCase();
    if (normalizedUrl && !normalizedUrl.startsWith('http:') && !normalizedUrl.startsWith('https:') && !normalizedUrl.startsWith('//')) {
        url = path.join(staticAssetsPublicPath, url!);
    }
    return url;
}

function concatObjectAndFieldActions(
    objectActions?: APICustomActionObject[],
    fieldActions?: APICustomActionField[]
): (APICustomActionObject | APICustomActionField)[] | undefined {
    let result: (APICustomActionObject | APICustomActionField)[] = [];
    if (fieldActions) {
        result = result.concat(fieldActions);
    }
    if (objectActions) {
        result = result.concat(objectActions);
    }
    if (result.length) {
        return result;
    }
    return undefined;
}
