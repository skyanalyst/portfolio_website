"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getErrorAtLine = exports.contentChangeResultCounts = exports.isContentChangeResultEmpty = exports.isContentChangesEmpty = exports.updateOperationValueFieldWithCrossReference = exports.getCSIDocumentsAndAssetsFromContentSourceDataByIds = exports.groupDocumentsByContentSource = exports.groupModelsByContentSource = exports.getDocumentFieldForLocale = exports.isDocumentFieldOneOfFieldTypes = exports.getUserContextForSrcType = exports.getUserContextForSrcTypeThunk = exports.findContentSourcesDataForTypeOrId = exports.getContentSourceDataByIdOrThrow = exports.getContentSourceDataByTypeAndProjectIdOrThrow = exports.getContentSourceId = exports.getContentSourceIdForContentSource = void 0;
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("@stackbit/utils");
function getContentSourceIdForContentSource(contentSource) {
    return getContentSourceId(contentSource.getContentSourceType(), contentSource.getProjectId());
}
exports.getContentSourceIdForContentSource = getContentSourceIdForContentSource;
function getContentSourceId(contentSourceType, srcProjectId) {
    return contentSourceType + ':' + srcProjectId;
}
exports.getContentSourceId = getContentSourceId;
function getContentSourceDataByTypeAndProjectIdOrThrow(srcType, srcProjectId, contentSourceDataById) {
    const contentSourceId = getContentSourceId(srcType, srcProjectId);
    return getContentSourceDataByIdOrThrow(contentSourceId, contentSourceDataById);
}
exports.getContentSourceDataByTypeAndProjectIdOrThrow = getContentSourceDataByTypeAndProjectIdOrThrow;
function getContentSourceDataByIdOrThrow(contentSourceId, contentSourceDataById) {
    const contentSourceData = contentSourceDataById[contentSourceId];
    if (!contentSourceData) {
        throw new Error(`Content source not found: '${contentSourceId}'.`);
    }
    return contentSourceData;
}
exports.getContentSourceDataByIdOrThrow = getContentSourceDataByIdOrThrow;
function findContentSourcesDataForTypeOrId({ contentSourceDataById, srcType, srcProjectId }) {
    return lodash_1.default.filter(contentSourceDataById, (contentSourceData) => {
        const srcTypeMatch = !srcType || contentSourceData.srcType === srcType;
        const srcProjectIdMatch = !srcProjectId || contentSourceData.srcProjectId === srcProjectId;
        return srcTypeMatch && srcProjectIdMatch;
    });
}
exports.findContentSourcesDataForTypeOrId = findContentSourcesDataForTypeOrId;
function getUserContextForSrcTypeThunk(user) {
    return (srcType) => getUserContextForSrcType(srcType, user);
}
exports.getUserContextForSrcTypeThunk = getUserContextForSrcTypeThunk;
function getUserContextForSrcType(srcType, user) {
    var _a;
    if (!user) {
        return undefined;
    }
    const connection = (_a = user === null || user === void 0 ? void 0 : user.connections) === null || _a === void 0 ? void 0 : _a.find((connection) => connection.type === srcType);
    return {
        email: user.email,
        name: user.name,
        ...connection
    };
}
exports.getUserContextForSrcType = getUserContextForSrcType;
function isDocumentFieldOneOfFieldTypes(documentField, fieldTypes) {
    return fieldTypes.includes(documentField.type);
}
exports.isDocumentFieldOneOfFieldTypes = isDocumentFieldOneOfFieldTypes;
function getDocumentFieldForLocale(docField, locale) {
    if (docField && docField.localized) {
        if (!locale) {
            return null;
        }
        const { localized, locales, ...base } = docField;
        const localizedField = locales === null || locales === void 0 ? void 0 : locales[locale];
        if (!localizedField) {
            return null;
        }
        return {
            ...base,
            ...localizedField
        };
    }
    else {
        return docField;
    }
}
exports.getDocumentFieldForLocale = getDocumentFieldForLocale;
function groupModelsByContentSource({ models }) {
    const modelMapByContentSource = {};
    for (const model of models) {
        const { srcType, srcProjectId, ...rest } = model;
        lodash_1.default.set(modelMapByContentSource, [srcType, srcProjectId, model.name], rest);
    }
    return modelMapByContentSource;
}
exports.groupModelsByContentSource = groupModelsByContentSource;
function groupDocumentsByContentSource({ documents }) {
    const documentMapByContentSource = {};
    for (const document of documents) {
        const { srcType, srcProjectId, ...rest } = document;
        (0, utils_1.append)(documentMapByContentSource, [srcType, srcProjectId], rest);
    }
    return documentMapByContentSource;
}
exports.groupDocumentsByContentSource = groupDocumentsByContentSource;
function getCSIDocumentsAndAssetsFromContentSourceDataByIds(contentSourceData, objects) {
    const documents = [];
    const assets = [];
    for (const object of objects) {
        if (object.srcObjectId in contentSourceData.csiDocumentMap) {
            documents.push(contentSourceData.csiDocumentMap[object.srcObjectId]);
        }
        else if (object.srcObjectId in contentSourceData.csiAssetMap) {
            assets.push(contentSourceData.csiAssetMap[object.srcObjectId]);
        }
    }
    return {
        documents,
        assets
    };
}
exports.getCSIDocumentsAndAssetsFromContentSourceDataByIds = getCSIDocumentsAndAssetsFromContentSourceDataByIds;
function updateOperationValueFieldWithCrossReference(type, refObject) {
    return {
        type,
        value: type === 'json' || type === 'cross-reference' ? refObject : JSON.stringify(refObject)
    };
}
exports.updateOperationValueFieldWithCrossReference = updateOperationValueFieldWithCrossReference;
function isContentChangesEmpty(contentChanges) {
    var _a, _b, _c, _d, _e, _f;
    return (!contentChanges ||
        (!((_a = contentChanges.documents) === null || _a === void 0 ? void 0 : _a.length) &&
            !((_b = contentChanges.assets) === null || _b === void 0 ? void 0 : _b.length) &&
            !((_c = contentChanges.scheduledActions) === null || _c === void 0 ? void 0 : _c.length) &&
            !((_d = contentChanges.deletedDocumentIds) === null || _d === void 0 ? void 0 : _d.length) &&
            !((_e = contentChanges.deletedAssetIds) === null || _e === void 0 ? void 0 : _e.length) &&
            !((_f = contentChanges.deletedScheduledActionIds) === null || _f === void 0 ? void 0 : _f.length)));
}
exports.isContentChangesEmpty = isContentChangesEmpty;
function isContentChangeResultEmpty(contentChangeResult) {
    return (contentChangeResult.updatedDocuments.length === 0 &&
        contentChangeResult.updatedAssets.length === 0 &&
        contentChangeResult.updatedScheduledActions.length === 0 &&
        contentChangeResult.deletedDocuments.length === 0 &&
        contentChangeResult.deletedAssets.length === 0 &&
        contentChangeResult.deletedScheduledActions.length === 0);
}
exports.isContentChangeResultEmpty = isContentChangeResultEmpty;
function contentChangeResultCounts(contentChangeResult) {
    return {
        updatedDocumentsCount: contentChangeResult.updatedDocuments.length,
        updatedAssetsCount: contentChangeResult.updatedAssets.length,
        updatedScheduledActionCount: contentChangeResult.updatedScheduledActions.length,
        deletedDocumentsCount: contentChangeResult.deletedDocuments.length,
        deletedAssetsCount: contentChangeResult.deletedAssets.length,
        deletedScheduledActionsCount: contentChangeResult.deletedScheduledActions.length
    };
}
exports.contentChangeResultCounts = contentChangeResultCounts;
// eslint-disable-next-line @typescript-eslint/ban-types
function getErrorAtLine(dropLastCallStackEntries, dropCallStackFunc) {
    var _a, _b;
    const tempErr = new Error();
    Error.captureStackTrace(tempErr, dropCallStackFunc !== null && dropCallStackFunc !== void 0 ? dropCallStackFunc : getErrorAtLine);
    const atLine = (_b = (_a = tempErr.stack) === null || _a === void 0 ? void 0 : _a.split('\n')[1 + dropLastCallStackEntries]) === null || _b === void 0 ? void 0 : _b.trim();
    return atLine ? ` ${atLine}` : '';
}
exports.getErrorAtLine = getErrorAtLine;
//# sourceMappingURL=content-store-utils.js.map