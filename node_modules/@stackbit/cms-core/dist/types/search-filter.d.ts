declare type Distribute<U> = U extends any ? U[] : never;
export declare type ReferenceValueType = {
    srcType: string;
    srcProjectId: string;
    srcDocumentId: string;
};
declare type ValueType = string | number | Date | boolean | ReferenceValueType;
declare type BaseFilterItem = {
    field: string;
    isMeta?: boolean;
};
declare type EqualFilterItem = BaseFilterItem & {
    operator: 'eq' | 'neq';
    value: ValueType;
};
declare type UndefinedFilterItem = BaseFilterItem & {
    operator: 'is-undefined' | 'is-not-undefined';
};
declare type EmptyFilterItem = BaseFilterItem & {
    operator: 'is-empty' | 'is-not-empty';
};
declare type CompareFilterItem = BaseFilterItem & {
    operator: 'gte' | 'lte';
    value: ValueType;
};
declare type IncludeStringFilterItem = BaseFilterItem & {
    operator: 'includes' | 'not-includes';
    value: string;
};
declare type IncludeListFilterItem = BaseFilterItem & {
    operator: 'in' | 'nin';
    values: Distribute<ValueType>;
};
declare type IncludeAllFilterItem = BaseFilterItem & {
    operator: 'all';
    values: Distribute<ValueType>;
};
declare type BetweenFilterItem = BaseFilterItem & {
    operator: 'between';
    startValue: ValueType;
    endValue: ValueType;
};
export declare type SearchFilterItem = EqualFilterItem | UndefinedFilterItem | CompareFilterItem | IncludeStringFilterItem | IncludeListFilterItem | IncludeAllFilterItem | BetweenFilterItem | EmptyFilterItem;
export declare type SearchFilter = LogicalOperator;
declare type LogicalOperator = LogicalAndOperator;
declare type LogicalAndOperator = {
    and: SearchFilterItem[];
};
export {};
//# sourceMappingURL=search-filter.d.ts.map