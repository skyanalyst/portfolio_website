import * as CSITypes from '@stackbit/types';
import { APICustomActionField, APICustomActionObject } from './custom-actions';
export declare type DocumentField = DocumentStringLikeField | DocumentMarkdownField | DocumentNumberField | DocumentBooleanField | DocumentJsonField | DocumentStyleField | DocumentRichTextField | DocumentImageField | DocumentFileField | DocumentObjectField | DocumentModelField | DocumentReferenceField | DocumentCrossReferenceField | DocumentListField;
export declare type DocumentFieldNonLocalized = DocumentStringLikeFieldNonLocalized | DocumentMarkdownFieldNonLocalized | DocumentNumberFieldNonLocalized | DocumentBooleanFieldNonLocalized | DocumentJsonFieldNonLocalized | DocumentStyleFieldNonLocalized | DocumentRichTextFieldNonLocalized | DocumentImageFieldNonLocalized | DocumentFileFieldNonLocalized | DocumentObjectFieldNonLocalized | DocumentModelFieldNonLocalized | DocumentReferenceFieldNonLocalized | DocumentCrossReferenceFieldNonLocalized | DocumentListFieldNonLocalized;
export declare type DocumentFieldLocalized = DocumentStringLikeFieldLocalized | DocumentMarkdownFieldLocalized | DocumentNumberFieldLocalized | DocumentBooleanFieldLocalized | DocumentJsonFieldLocalized | DocumentStyleFieldLocalized | DocumentRichTextFieldLocalized | DocumentImageFieldLocalized | DocumentFileFieldLocalized | DocumentObjectFieldLocalized | DocumentModelFieldLocalized | DocumentReferenceFieldLocalized | DocumentCrossReferenceFieldLocalized | DocumentListFieldLocalized;
export declare type DocumentFieldAPI = DocumentStringLikeFieldAPI | DocumentMarkdownFieldAPI | DocumentNumberFieldAPI | DocumentBooleanFieldAPI | DocumentJsonFieldAPI | DocumentStyleFieldAPI | DocumentRichTextFieldAPI | DocumentImageFieldAPI | DocumentFileFieldAPI | DocumentObjectFieldAPI | DocumentModelFieldAPI | DocumentReferenceFieldAPI | DocumentCrossReferenceFieldAPI | DocumentListFieldAPI;
export declare type DocumentFieldBaseProps = DocumentFieldBasePropsForDocumentField<DocumentFieldNonLocalized>;
export declare type DocumentFieldSpecificProps = DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalized>;
/**
 * Utility Types
 */
declare type FieldType = CSITypes.FieldType;
export declare type ExtractByType<Union extends {
    type: FieldType | 'unresolved_reference';
}, Type extends FieldType | 'unresolved_reference'> = Union extends {
    type: Type;
} ? Union : never;
export declare type DocumentFieldForType<Type extends FieldType> = ExtractByType<DocumentField, Type>;
export declare type DocumentFieldNonLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldNonLocalized, Type>;
export declare type DocumentFieldLocalizedForType<Type extends FieldType> = ExtractByType<DocumentFieldLocalized, Type>;
export declare type DocumentFieldAPIForType<Type extends FieldType | 'unresolved_reference'> = ExtractByType<DocumentFieldAPI, Type>;
export declare type DocumentFieldBasePropsForType<Type extends FieldType> = ExtractByType<DocumentFieldBaseProps, Type>;
export declare type DocumentFieldBasePropsForDocumentField<DocField extends DocumentField> = DocField extends {
    isUnset?: false;
    localized?: false;
} ? Omit<DocField, keyof DocumentFieldSpecificPropsForDocumentField<DocumentFieldLocalizedForType<DocField['type']>> | 'localized' | 'isUnset'> : never;
export declare type DocumentFieldSpecificPropsForDocumentField<DocField extends DocumentFieldLocalized> = DocField extends {
    locales: Record<string, infer Props>;
} ? Omit<Props, 'locale'> : never;
/**
 * string-like fields (e.g., string, url, slug, text, html, enum, date, datetime, color)
 * The 'markdown' is not included, although it is a string field, because it has
 * the `multiElement` and `isUnset` fields.
 * The 'file' also has `isUnset` field and should have its own type anyway.
 */
declare type DocumentStringLikeFieldTypes = Exclude<CSITypes.DocumentStringLikeFieldTypes, 'markdown' | 'file'>;
export declare type DocumentStringLikeField = DocumentStringLikeFieldForType<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldNonLocalized = DistributeDocumentStringLikeFieldNonLocalized<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldLocalized = DistributeDocumentStringFieldLocalized<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldAPI = DistributeDocumentStringFieldAPI<DocumentStringLikeFieldTypes>;
export declare type DocumentStringLikeFieldForType<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldNonLocalizedForType<Type> | DocumentStringLikeFieldLocalizedForType<Type> : never;
export declare type DistributeDocumentStringLikeFieldNonLocalized<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldNonLocalizedForType<Type> : never;
export declare type DistributeDocumentStringFieldLocalized<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldLocalizedForType<Type> : never;
export declare type DistributeDocumentStringFieldAPI<Type> = Type extends DocumentStringLikeFieldTypes ? DocumentStringLikeFieldAPIForType<Type> : never;
export interface DocumentStringLikeFieldNonLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: string;
}
export interface DocumentStringLikeFieldLocalizedForType<Type extends DocumentStringLikeFieldTypes> {
    type: Type;
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: string;
    }>;
}
export declare type DocumentStringLikeFieldAPIForType<Type extends DocumentStringLikeFieldTypes> = {
    type: Type;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    value?: string | null;
} & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * markdown
 */
export declare type DocumentMarkdownField = DocumentMarkdownFieldNonLocalized | DocumentMarkdownFieldLocalized;
export declare type DocumentMarkdownFieldNonLocalized = {
    type: 'markdown';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    multiElement?: boolean;
    value?: string;
} & ({
    isUnset: true;
    value?: never;
} | {
    isUnset?: false;
    value: string;
});
export interface DocumentMarkdownFieldLocalized {
    type: 'markdown';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        multiElement?: boolean;
        value: string;
    }>;
}
export declare type DocumentMarkdownFieldAPI = {
    type: 'markdown';
    multiElement?: boolean;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    value?: string | null;
} & ({
    isUnset: true;
    value?: null;
} | {
    isUnset?: false;
    value: string;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * number
 */
export declare type DocumentNumberField = DocumentNumberFieldNonLocalized | DocumentNumberFieldLocalized;
export interface DocumentNumberFieldNonLocalized {
    type: 'number';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: number;
}
export interface DocumentNumberFieldLocalized {
    type: 'number';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: number;
    }>;
}
export declare type DocumentNumberFieldAPI = {
    type: 'number';
    value?: number | null;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * boolean
 */
export declare type DocumentBooleanField = DocumentBooleanFieldNonLocalized | DocumentBooleanFieldLocalized;
export interface DocumentBooleanFieldNonLocalized {
    type: 'boolean';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: boolean;
}
export interface DocumentBooleanFieldLocalized {
    type: 'boolean';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: boolean;
    }>;
}
export declare type DocumentBooleanFieldAPI = {
    type: 'boolean';
    value?: boolean | null;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * json
 */
export declare type DocumentJsonField = DocumentJsonFieldNonLocalized | DocumentJsonFieldLocalized;
export declare type DocumentJsonFieldNonLocalized = {
    type: 'json';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: any;
} & ({
    isUnset: true;
    value?: never;
} | {
    isUnset?: false;
    value: any;
});
export interface DocumentJsonFieldLocalized {
    type: 'json';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: any;
    }>;
}
export declare type DocumentJsonFieldAPI = {
    type: 'json';
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    value?: any;
} & ({
    isUnset: true;
    value?: null;
} | {
    isUnset?: false;
    value: any;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * style
 */
export declare type DocumentStyleField = DocumentStyleFieldNonLocalized | DocumentStyleFieldLocalized;
export declare type DocumentStyleFieldValue = Record<string, Partial<Record<CSITypes.StyleProps, any>>>;
export interface DocumentStyleFieldNonLocalized {
    type: 'style';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: DocumentStyleFieldValue;
}
export interface DocumentStyleFieldLocalized {
    type: 'style';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: DocumentStyleFieldValue;
    }>;
}
export declare type DocumentStyleFieldAPI = {
    type: 'style';
    value?: DocumentStyleFieldValue | null;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * richText
 */
export declare type DocumentRichTextField = DocumentRichTextFieldNonLocalized | DocumentRichTextFieldLocalized;
export declare type DocumentRichTextFieldValue = any;
export declare type DocumentRichTextFieldNonLocalized = {
    type: 'richText';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    hint?: string;
    multiElement?: boolean;
    value?: DocumentRichTextFieldValue;
} & ({
    isUnset: true;
    value?: never;
} | {
    isUnset?: false;
    value: DocumentRichTextFieldValue;
});
export interface DocumentRichTextFieldLocalized {
    type: 'richText';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        hint?: string;
        multiElement?: boolean;
        value: DocumentRichTextFieldValue;
    }>;
}
export declare type DocumentRichTextFieldAPI = {
    type: 'richText';
    hint?: string;
    multiElement?: boolean;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    value?: DocumentRichTextFieldValue | null;
} & ({
    isUnset: true;
    value?: null;
} | {
    isUnset?: false;
    value: DocumentRichTextFieldValue;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * image
 */
export declare type DocumentImageField = DocumentImageFieldNonLocalized | DocumentImageFieldLocalized;
export declare type DocumentImageFieldNonLocalized = {
    type: 'image';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    source?: string;
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    sourceData?: any;
    fields: ImageFields;
});
export interface DocumentImageFieldLocalized {
    type: 'image';
    label?: string;
    source?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        sourceData?: any;
        fields: ImageFields;
    }>;
}
export declare type ImageFields = {
    title: DocumentStringLikeFieldForType<'string'>;
    url: DocumentStringLikeFieldForType<'string'>;
};
export declare type DocumentImageFieldAPI = {
    type: 'image';
    source?: string;
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    sourceData?: any;
    fields: ImageFieldsAPI;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
export declare type ImageFieldsAPI = {
    title: DocumentFieldAPIForType<'string'>;
    url: DocumentFieldAPIForType<'string'>;
};
/**
 * file
 */
export declare type DocumentFileField = DocumentFileFieldNonLocalized | DocumentFileFieldLocalized;
export declare type DocumentFileFieldNonLocalized = {
    type: 'file';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    value?: any;
} & ({
    isUnset: true;
    value?: never;
} | {
    isUnset?: false;
    value: any;
});
export interface DocumentFileFieldLocalized {
    type: 'file';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        value: any;
    }>;
}
export declare type DocumentFileFieldAPI = {
    type: 'file';
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    value?: any;
} & ({
    isUnset: true;
    value?: null;
} | {
    isUnset?: false;
    value: any;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * object
 */
export declare type DocumentObjectField = DocumentObjectFieldNonLocalized | DocumentObjectFieldLocalized;
export declare type DocumentObjectFieldNonLocalized = {
    type: 'object';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    getPreview: (options: {
        delegate?: CSITypes.ConfigDelegate;
        locale?: string;
    }) => DocumentObjectFieldPreview;
    getObjectActions?: () => APICustomActionObject[] | undefined;
    fields: Record<string, DocumentField>;
});
export interface DocumentObjectFieldLocalized {
    type: 'object';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        getPreview: (options: {
            delegate?: CSITypes.ConfigDelegate;
            locale?: string;
        }) => DocumentObjectFieldPreview;
        getObjectActions?: () => APICustomActionObject[] | undefined;
        fields: Record<string, DocumentField>;
    }>;
}
export interface DocumentObjectFieldPreview {
    previewTitle?: string;
    previewSubtitle?: string;
    previewImage?: unknown;
}
export declare type DocumentObjectFieldAPI = {
    type: 'object';
    label?: string;
    description?: string;
} & ({
    isUnset: true;
    actions?: APICustomActionField[];
} | {
    isUnset?: false;
    srcObjectLabel: string;
    actions?: (APICustomActionField | APICustomActionObject)[];
    fields: Record<string, DocumentFieldAPI>;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * model
 */
export declare type DocumentModelField = DocumentModelFieldNonLocalized | DocumentModelFieldLocalized;
export declare type DocumentModelFieldNonLocalized = {
    type: 'model';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    srcModelName: string;
    srcModelLabel: string;
    getPreview: (options: {
        delegate?: CSITypes.ConfigDelegate;
        locale?: string;
    }) => DocumentModelFieldPreview;
    getObjectActions?: () => APICustomActionObject[] | undefined;
    fields: Record<string, DocumentField>;
});
export interface DocumentModelFieldLocalized {
    type: 'model';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        srcModelName: string;
        srcModelLabel: string;
        getPreview: (options: {
            delegate?: CSITypes.ConfigDelegate;
            locale?: string;
        }) => DocumentModelFieldPreview;
        getObjectActions?: () => APICustomActionObject[] | undefined;
        fields: Record<string, DocumentField>;
    }>;
}
export declare type DocumentModelFieldAPI = {
    type: 'object';
    label?: string;
    description?: string;
} & ({
    isUnset: true;
    actions?: APICustomActionField[];
} | {
    isUnset?: false;
    srcObjectLabel: string;
    srcModelName: string;
    srcModelLabel: string;
    actions?: (APICustomActionField | APICustomActionObject)[];
    fields: Record<string, DocumentFieldAPI>;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
export interface DocumentModelFieldPreview {
    previewTitle: string;
    previewSubtitle?: string;
    previewImage?: unknown;
}
/**
 * reference
 */
export declare type DocumentReferenceField = DocumentReferenceFieldNonLocalized | DocumentReferenceFieldLocalized;
export declare type DocumentReferenceFieldNonLocalized = {
    type: 'reference';
    refType: 'document' | 'asset';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    refId: string;
});
export interface DocumentReferenceFieldLocalized {
    type: 'reference';
    refType: 'document' | 'asset';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        refId: string;
    }>;
}
export declare type DocumentReferenceFieldAPI = {
    type: 'unresolved_reference';
    refType: 'object' | 'image';
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    refId: string;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * cross-reference
 */
export declare type DocumentCrossReferenceField = DocumentCrossReferenceFieldNonLocalized | DocumentCrossReferenceFieldLocalized;
export declare type DocumentCrossReferenceFieldNonLocalized = {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    refId: string;
    refSrcType: string;
    refProjectId: string;
});
export interface DocumentCrossReferenceFieldLocalized {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        refId: string;
        refSrcType: string;
        refProjectId: string;
    }>;
}
export declare type DocumentCrossReferenceFieldAPI = {
    type: 'cross-reference';
    refType: 'document' | 'asset';
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
} & ({
    isUnset: true;
} | {
    isUnset?: false;
    refId: string;
    refSrcType: string;
    refProjectId: string;
}) & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
/**
 * list
 */
export declare type DocumentListField = DocumentListFieldNonLocalized | DocumentListFieldLocalized;
export declare type DocumentListFieldItems = Exclude<DocumentFieldNonLocalized, DocumentListFieldNonLocalized>;
export interface DocumentListFieldNonLocalized {
    type: 'list';
    label?: string;
    localized?: false;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    items: DocumentListFieldItems[];
}
export interface DocumentListFieldLocalized {
    type: 'list';
    label?: string;
    localized: true;
    getFieldActions?: (options?: {
        locale?: string;
    }) => APICustomActionField[] | undefined;
    locales: Record<string, {
        locale: string;
        items: DocumentListFieldItems[];
    }>;
}
export declare type DocumentListFieldItemsAPI = Exclude<DocumentFieldAPI, DocumentListFieldAPI>;
export declare type DocumentListFieldAPI = {
    type: 'list';
    label?: string;
    description?: string;
    actions?: APICustomActionField[];
    items: DocumentListFieldItemsAPI[];
} & ({
    localized?: false;
} | {
    localized: true;
    locale: string;
});
export {};
//# sourceMappingURL=content-store-document-fields.d.ts.map