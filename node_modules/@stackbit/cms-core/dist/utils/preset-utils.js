"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentObjectFromPreset = exports.getPresetFromDocument = void 0;
const lodash_1 = __importDefault(require("lodash"));
const types_1 = require("@stackbit/types");
function getPresetData(presetId, field, logger) {
    const dataField = (0, types_1.getLocalizedFieldForLocale)(field);
    let data;
    if ((dataField === null || dataField === void 0 ? void 0 : dataField.type) === 'json') {
        data = dataField.value;
    }
    else if ((dataField === null || dataField === void 0 ? void 0 : dataField.type) === 'string' || (dataField === null || dataField === void 0 ? void 0 : dataField.type) === 'text') {
        try {
            data = JSON.parse(dataField.value);
        }
        catch (err) {
            logger === null || logger === void 0 ? void 0 : logger.error(`Can't parse data field for preset ${presetId}`);
        }
    }
    return data;
}
function getPresetThumbnail(presetId, thumbnailField, csiAssetMap, logger) {
    var _a, _b, _c, _d, _e;
    let thumbnail;
    if ((thumbnailField === null || thumbnailField === void 0 ? void 0 : thumbnailField.type) === 'image') {
        const imageFields = (_a = (0, types_1.getLocalizedFieldForLocale)(thumbnailField)) === null || _a === void 0 ? void 0 : _a.fields;
        if (imageFields) {
            const urlField = imageFields.url;
            if (urlField === null || urlField === void 0 ? void 0 : urlField.localized) {
                const vals = Object.values(urlField.locales);
                if (vals === null || vals === void 0 ? void 0 : vals.length) {
                    thumbnail = (_b = vals[0]) === null || _b === void 0 ? void 0 : _b.value;
                }
            }
            else {
                thumbnail = urlField.value;
            }
        }
    }
    else if ((thumbnailField === null || thumbnailField === void 0 ? void 0 : thumbnailField.type) === 'reference' && thumbnailField.refType === 'asset') {
        const refId = (_c = (0, types_1.getLocalizedFieldForLocale)(thumbnailField)) === null || _c === void 0 ? void 0 : _c.refId;
        if (refId) {
            const fileField = (_d = csiAssetMap[refId]) === null || _d === void 0 ? void 0 : _d.fields.file;
            if (fileField === null || fileField === void 0 ? void 0 : fileField.localized) {
                const vals = Object.values(fileField.locales);
                if (vals === null || vals === void 0 ? void 0 : vals.length) {
                    thumbnail = (_e = vals[0]) === null || _e === void 0 ? void 0 : _e.url;
                }
            }
            else {
                thumbnail = fileField === null || fileField === void 0 ? void 0 : fileField.url;
            }
        }
        else {
            logger === null || logger === void 0 ? void 0 : logger.warn(`No thumbnail reference found for preset ${presetId}`);
        }
    }
    return thumbnail;
}
function getPresetFromDocument({ srcType, srcProjectId, csiDocument, csiAssetMap, logger }) {
    const data = csiDocument.fields['data'] ? getPresetData(csiDocument.id, csiDocument.fields['data'], logger) : null;
    if (!data) {
        logger === null || logger === void 0 ? void 0 : logger.warn(`Error finding preset data for preset ${csiDocument.id}`);
        return null;
    }
    const thumbnail = csiDocument.fields['thumbnail'] ? getPresetThumbnail(csiDocument.id, csiDocument.fields['thumbnail'], csiAssetMap, logger) : null;
    return {
        srcType,
        srcProjectId,
        ...data,
        thumbnail
    };
}
exports.getPresetFromDocument = getPresetFromDocument;
function getDocumentObjectFromPreset(preset, model) {
    let presetData = lodash_1.default.omit(preset, 'thumbnail');
    if (model && model.fields) {
        const dataField = model.fields.find((field) => field.name === 'data');
        if ((dataField === null || dataField === void 0 ? void 0 : dataField.type) === 'string' || (dataField === null || dataField === void 0 ? void 0 : dataField.type) === 'text') {
            presetData = JSON.stringify(presetData, null, 2);
        }
    }
    return {
        label: preset.label,
        data: presetData
    };
}
exports.getDocumentObjectFromPreset = getDocumentObjectFromPreset;
//# sourceMappingURL=preset-utils.js.map