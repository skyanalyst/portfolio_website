"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDocumentFieldLabelValueForSiteMapEntry = exports.getSiteMapGroupKeyForDocument = exports.updateSiteMapEntriesWithContentChanges = exports.getSiteMapEntriesFromStackbitConfig = exports.SiteMapStaticEntriesKey = void 0;
const lodash_1 = __importDefault(require("lodash"));
const utils_1 = require("@stackbit/utils");
const store_to_csi_docs_converter_1 = require("./store-to-csi-docs-converter");
const content_store_utils_1 = require("../content-store-utils");
exports.SiteMapStaticEntriesKey = Symbol.for('SiteMapStaticEntriesKey');
async function getSiteMapEntriesFromStackbitConfig({ stackbitConfig, contentSourceDataById, configDelegate }) {
    var _a;
    if (!(stackbitConfig === null || stackbitConfig === void 0 ? void 0 : stackbitConfig.siteMap)) {
        return {};
    }
    const siteMapOptions = lodash_1.default.reduce(contentSourceDataById, (accum, contentSourceData) => {
        return {
            models: accum.models.concat(contentSourceData.models.map((model) => ({
                srcType: contentSourceData.srcType,
                srcProjectId: contentSourceData.srcProjectId,
                ...model
            }))),
            documents: accum.documents.concat((0, store_to_csi_docs_converter_1.mapStoreDocumentsToCSIDocumentsWithSource)({
                documents: contentSourceData.documents,
                csiDocumentMap: contentSourceData.csiDocumentMap
            }))
        };
    }, { models: [], documents: [] });
    const rawSiteMapEntries = (_a = stackbitConfig.siteMap({
        ...siteMapOptions,
        ...configDelegate
    })) !== null && _a !== void 0 ? _a : [];
    // The rawSiteMapEntries entries are provided by the user, sanitize them and filter out illegal entries
    return sanitizeAndGroupSiteMapEntries(rawSiteMapEntries);
}
exports.getSiteMapEntriesFromStackbitConfig = getSiteMapEntriesFromStackbitConfig;
/**
 * Because the sitemap is directly affected by documents, the sitemap can change
 * whenever there is a content change. For example, if a new document is added
 * or deleted, a new sitemap entry would be added or deleted respectively.
 * Likewise, if a slug of an existing document is changed, the sitemap entry for
 * that document would also change.
 *
 * However, to improve overall performance, we don't want to call
 * stackbitConfig.siteMap() with all the documents when a small set of documents
 * is changed. Instead, we want to call stackbitConfig.siteMap() with only the
 * changed documents. Then we merge the partial sitemap entries with the
 * existing sitemap entries using sitemap entry identifiers such as
 * srcDocumentId for document-related entries and stackbitId for static entries.
 *
 * @param siteMapEntries Existing sitemap entries
 * @param contentChanges A ContentChangeResult including new, changed and
 *   deleted documents
 * @param stackbitConfig Stackbit config
 * @param contentSourceDataById ContentSourceData by content source IDs
 */
async function updateSiteMapEntriesWithContentChanges({ siteMapEntryGroups, contentChanges, stackbitConfig, contentSourceDataById, configDelegate }) {
    var _a;
    if (!(stackbitConfig === null || stackbitConfig === void 0 ? void 0 : stackbitConfig.siteMap)) {
        return {};
    }
    if (contentChanges.updatedDocuments.length === 0 && contentChanges.deletedDocuments.length === 0) {
        return siteMapEntryGroups;
    }
    // Create a map of changed documents by content source id
    const changedDocumentsByContentSourceId = contentChanges.updatedDocuments.reduce((accum, contentChangeResultItem) => {
        var _a;
        const contentSourceId = (0, content_store_utils_1.getContentSourceId)(contentChangeResultItem.srcType, contentChangeResultItem.srcProjectId);
        const document = (_a = contentSourceDataById[contentSourceId]) === null || _a === void 0 ? void 0 : _a.documentMap[contentChangeResultItem.srcObjectId];
        if (document) {
            (0, utils_1.append)(accum, contentSourceId, document);
        }
        return accum;
    }, {});
    // Create siteMap parameters from changed documents
    const partialSiteMapOptions = lodash_1.default.reduce(contentSourceDataById, (accum, contentSourceData) => {
        var _a;
        const changedDocuments = (_a = changedDocumentsByContentSourceId[contentSourceData.id]) !== null && _a !== void 0 ? _a : [];
        return {
            models: accum.models.concat(contentSourceData.models.map((model) => ({
                srcType: contentSourceData.srcType,
                srcProjectId: contentSourceData.srcProjectId,
                ...model
            }))),
            documents: accum.documents.concat((0, store_to_csi_docs_converter_1.mapStoreDocumentsToCSIDocumentsWithSource)({
                documents: changedDocuments,
                csiDocumentMap: contentSourceData.csiDocumentMap
            }))
        };
    }, { models: [], documents: [] });
    const partialRawSiteMapEntries = (_a = stackbitConfig.siteMap({
        ...partialSiteMapOptions,
        ...configDelegate
    })) !== null && _a !== void 0 ? _a : [];
    // The partialRawSiteMapEntries entries are provided by the user, sanitize them and filter out illegal entries
    const partialSiteMapEntryGroups = sanitizeAndGroupSiteMapEntries(partialRawSiteMapEntries);
    siteMapEntryGroups = lodash_1.default.reduce(contentChanges.deletedDocuments, (accum, contentChangeResultItem) => {
        const siteMapGroupKey = `${contentChangeResultItem.srcType}:${contentChangeResultItem.srcProjectId}:${contentChangeResultItem.srcObjectId}`;
        delete accum[siteMapGroupKey];
        return accum;
    }, siteMapEntryGroups);
    siteMapEntryGroups = lodash_1.default.reduce(partialSiteMapEntryGroups, (accum, newSiteMapEntriesByStableId, siteMapGroupKey) => {
        accum[siteMapGroupKey] = newSiteMapEntriesByStableId;
        return accum;
    }, siteMapEntryGroups);
    return siteMapEntryGroups;
}
exports.updateSiteMapEntriesWithContentChanges = updateSiteMapEntriesWithContentChanges;
function sanitizeAndGroupSiteMapEntries(siteMapEntries) {
    return siteMapEntries.reduce((accum, siteMapEntry) => {
        if (!siteMapEntry) {
            return accum;
        }
        if (typeof siteMapEntry.urlPath !== 'string') {
            return accum;
        }
        if ('document' in siteMapEntry) {
            const doc = siteMapEntry.document;
            if (!doc.srcType || !doc.srcProjectId || !doc.modelName || !doc.id) {
                return accum;
            }
            siteMapEntry = {
                ...siteMapEntry,
                document: {
                    id: doc.id,
                    modelName: doc.modelName,
                    srcType: doc.srcType,
                    srcProjectId: doc.srcProjectId
                }
            };
        }
        if (!siteMapEntry.stableId) {
            siteMapEntry = {
                ...siteMapEntry,
                stableId: 'document' in siteMapEntry ? siteMapEntry.document.id : siteMapEntry.urlPath
            };
        }
        const groupKey = getSiteMapGroupKey(siteMapEntry);
        lodash_1.default.set(accum, [groupKey, siteMapEntry.stableId], siteMapEntry);
        return accum;
    }, {});
}
function getSiteMapGroupKey(siteMapEntry) {
    return 'document' in siteMapEntry
        ? getSiteMapGroupKeyForDocument({
            srcType: siteMapEntry.document.srcType,
            srcProjectId: siteMapEntry.document.srcProjectId,
            srcDocumentId: siteMapEntry.document.id
        })
        : exports.SiteMapStaticEntriesKey.toString();
}
function getSiteMapGroupKeyForDocument({ srcType, srcProjectId, srcDocumentId }) {
    return `${srcType}:${srcProjectId}:${srcDocumentId}`;
}
exports.getSiteMapGroupKeyForDocument = getSiteMapGroupKeyForDocument;
function getDocumentFieldLabelValueForSiteMapEntry({ siteMapEntry, locale, contentSourceDataById }) {
    var _a;
    if (!('document' in siteMapEntry)) {
        return null;
    }
    const contentSourceId = (0, content_store_utils_1.getContentSourceId)(siteMapEntry.document.srcType, siteMapEntry.document.srcProjectId);
    const contentSourceData = contentSourceDataById[contentSourceId];
    if (!contentSourceData) {
        return null;
    }
    const labelFieldName = (_a = contentSourceData.modelMap[siteMapEntry.document.modelName]) === null || _a === void 0 ? void 0 : _a.labelField;
    const document = contentSourceData.documentMap[siteMapEntry.document.id];
    if (!labelFieldName || !document) {
        return null;
    }
    const labelField = document.fields[labelFieldName];
    if (!labelField) {
        return null;
    }
    const localizedLabelField = (0, content_store_utils_1.getDocumentFieldForLocale)(labelField, locale);
    if (!localizedLabelField || !('value' in localizedLabelField) || !localizedLabelField.value) {
        return null;
    }
    return String(localizedLabelField.value);
}
exports.getDocumentFieldLabelValueForSiteMapEntry = getDocumentFieldLabelValueForSiteMapEntry;
//# sourceMappingURL=site-map.js.map