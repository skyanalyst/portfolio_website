import { Config, PageModel, DataModel, FieldObjectProps, FieldSpecificProps, ObjectModel } from '@stackbit/sdk';
import * as StackbitTypes from '@stackbit/types';
import * as ContentStoreTypes from '../types';
import { CustomActionStateChange, APICustomAction, APICustomActionDocumentSpecifier, APICustomActionDocument, APICustomActionObject, APICustomActionField, APIGetCustomActionRequest, APIRunCustomActionRequest, CustomActionRunStateMap, APICustomActionGlobal, APICustomActionBulk } from '../types';
/**
 * Removes "run" and "state" functions from actions of models, nested objects and fields.
 * Sets "needsResolving" flag to let client know if the action needs additional resolving.
 * @param {StackbitTypes.ModelMap} modelMap
 */
export declare function stripModelActions({ modelMap }: {
    modelMap: StackbitTypes.ModelMap;
}): StackbitTypes.ModelMap;
export declare function getGlobalAndBulkAPIActions({ stackbitConfig, customActionRunStateMap, contentSourceDataById, userLogger, pageUrl, user, locale, currentPageDocument }: {
    stackbitConfig: Config | null;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    userLogger: StackbitTypes.Logger;
    pageUrl?: string;
    user?: ContentStoreTypes.User;
    locale?: string;
    currentPageDocument?: APICustomActionDocumentSpecifier;
}): Promise<(APICustomActionGlobal | APICustomActionBulk)[]>;
export declare function getDocumentActionsThunk({ csiDocument, model, srcType, srcProjectId, customActionRunStateMap }: {
    csiDocument: StackbitTypes.Document;
    model: PageModel | DataModel;
    srcType: string;
    srcProjectId: string;
    customActionRunStateMap: ContentStoreTypes.CustomActionRunStateMap;
}): () => APICustomActionDocument[] | undefined;
export declare function getObjectModelActionsThunk({ model, csiParentDocument, srcType, srcProjectId, customActionRunStateMap, fieldPath }: {
    model: ObjectModel;
    csiParentDocument: StackbitTypes.Document;
    srcType: string;
    srcProjectId: string;
    customActionRunStateMap: ContentStoreTypes.CustomActionRunStateMap;
    fieldPath: (string | number)[];
}): () => ContentStoreTypes.APICustomActionObject[] | undefined;
export declare function getObjectFieldActionsThunk({ modelField, csiParentDocument, srcType, srcProjectId, customActionRunStateMap, fieldPath }: {
    modelField: FieldObjectProps;
    csiParentDocument: StackbitTypes.Document;
    srcType: string;
    srcProjectId: string;
    customActionRunStateMap: ContentStoreTypes.CustomActionRunStateMap;
    fieldPath: (string | number)[];
}): () => APICustomActionObject[] | undefined;
export declare function getFieldActions({ modelField, csiParentDocument, srcType, srcProjectId, customActionRunStateMap, fieldPath }: {
    modelField: FieldSpecificProps;
    csiParentDocument: StackbitTypes.Document;
    srcType: string;
    srcProjectId: string;
    customActionRunStateMap: ContentStoreTypes.CustomActionRunStateMap;
    fieldPath: (string | number)[];
}): APICustomActionField[] | undefined;
export declare function resolveCustomActionsById({ getActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    getActionRequest: APIGetCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): Promise<APICustomAction[]>;
export declare function runCustomAction({ runActionRequest, customActionRunStateMap, contentSourceDataById, stackbitConfig, userLogger }: {
    runActionRequest: APIRunCustomActionRequest;
    customActionRunStateMap: CustomActionRunStateMap;
    contentSourceDataById: Record<string, ContentStoreTypes.ContentSourceData>;
    stackbitConfig: Config | null;
    userLogger: StackbitTypes.Logger;
}): Promise<CustomActionStateChange>;
//# sourceMappingURL=custom-actions.d.ts.map