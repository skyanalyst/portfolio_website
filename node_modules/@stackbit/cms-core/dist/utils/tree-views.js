"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSanitizedTreeViews = void 0;
const lodash_1 = __importDefault(require("lodash"));
const content_store_utils_1 = require("../content-store-utils");
async function getSanitizedTreeViews({ configDelegate, stackbitConfig, contentSourceDataById, logger }) {
    var _a, _b;
    const treeViews = (_b = (await ((_a = stackbitConfig === null || stackbitConfig === void 0 ? void 0 : stackbitConfig.treeViews) === null || _a === void 0 ? void 0 : _a.call(stackbitConfig, configDelegate)))) !== null && _b !== void 0 ? _b : [];
    const mapTreeViews = (treeViews) => treeViews
        .map((treeView) => {
        var _a, _b, _c, _d, _e, _f;
        if ('document' in treeView && treeView.document) {
            const contentSourceId = (0, content_store_utils_1.getContentSourceId)(treeView.document.srcType, treeView.document.srcProjectId);
            const document = (_a = contentSourceDataById[contentSourceId]) === null || _a === void 0 ? void 0 : _a.documentMap[treeView.document.id];
            // explicit check because developers can skip TS check and just not define required properties of document object
            if (document) {
                treeView = {
                    ...treeView,
                    stableId: (_b = treeView.stableId) !== null && _b !== void 0 ? _b : document.srcObjectId,
                    label: (_c = treeView.label) !== null && _c !== void 0 ? _c : document.getPreview({ delegate: configDelegate }).previewTitle,
                    document: {
                        srcType: treeView.document.srcType,
                        srcProjectId: treeView.document.srcProjectId,
                        id: treeView.document.id
                    }
                };
            }
            else {
                logger.warn(`One of required properties is missing in tree view document, document skipped from tree view,
                            srcType: ${(_d = treeView.document) === null || _d === void 0 ? void 0 : _d.srcType}, srcProjectId: ${(_e = treeView.document) === null || _e === void 0 ? void 0 : _e.srcProjectId}, id: ${(_f = treeView.document) === null || _f === void 0 ? void 0 : _f.id}.`);
                // don't early return because treeView.children can be defined properly
                if (treeView.children) {
                    treeView = lodash_1.default.omit(treeView, 'document');
                }
                else {
                    return undefined;
                }
            }
        }
        if ('children' in treeView && treeView.children) {
            // required check because of
            // 1. typecast during omit in previous if
            // 2. developer can ignore TS check and just not define stableId and label
            if (treeView.stableId && treeView.label) {
                treeView = {
                    ...treeView,
                    children: mapTreeViews(treeView.children)
                };
            }
            else {
                logger.warn('one of required properties (stableId or label) is missing in tree view, children are skipped from tree view');
                return undefined;
            }
        }
        return treeView;
    })
        .filter(Boolean);
    return mapTreeViews(treeViews);
}
exports.getSanitizedTreeViews = getSanitizedTreeViews;
//# sourceMappingURL=tree-views.js.map