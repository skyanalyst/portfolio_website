import { Entry, Asset } from 'contentful';
import { AssetProps, EntryProps } from 'contentful-management';
import { Logger } from '@stackbit/types';
export interface SyncResult {
    entries: EntryProps<any>[];
    assets: AssetProps[];
    deletedEntries: Entry<any>[];
    deletedAssets: Asset[];
}
export declare type SyncCallback = (result: SyncResult) => void;
export declare class ContentPoller {
    private readonly logger;
    private readonly client;
    private readonly managementClient;
    private readonly notificationCallback;
    private readonly pollingIntervalMs;
    private nextSyncToken;
    private running;
    private pollTimeout;
    constructor({ spaceId, environment, accessToken, managementToken, pollingIntervalMs, notificationCallback, logger }: {
        spaceId: string;
        environment: string;
        accessToken: string;
        managementToken: string;
        pollingIntervalMs?: number;
        notificationCallback: SyncCallback;
        logger: Logger;
    });
    start(): void;
    stop(): void;
    private setPollTimeout;
    handleTimeout(): Promise<void>;
    poll(): Promise<any>;
    private batchRefetchData;
}
//# sourceMappingURL=content-poller.d.ts.map