"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertAsset = exports.convertEntry = exports.convertAssets = exports.convertEntities = void 0;
const lodash_1 = __importDefault(require("lodash"));
const contentful_consts_1 = require("./contentful-consts");
const ENTITY_TYPES = {
    ENTRY: 'Entry',
    ASSET: 'Asset'
};
function convertEntities({ entries, getModelByName, userMap, defaultLocale }) {
    return entries
        .map((entry) => {
        return convertEntry({ entry, getModelByName, userMap, defaultLocale });
    })
        .filter((document) => !!document);
}
exports.convertEntities = convertEntities;
function convertAssets({ assets, userMap, defaultLocale, useLocalizedAssetFields }) {
    return assets
        .map((asset) => {
        return convertAsset({ asset, userMap, defaultLocale, useLocalizedAssetFields });
    })
        .filter((asset) => !!asset);
}
exports.convertAssets = convertAssets;
function convertEntry({ entry, getModelByName, userMap, defaultLocale }) {
    if (!entry) {
        return;
    }
    const contentTypeId = getEntryContentTypeId(entry);
    const model = getModelByName(contentTypeId);
    if (!model) {
        return;
    }
    const entryId = getEntityId(entry);
    const spaceId = getEntitySpaceId(entry);
    const environment = getEntryEnvironmentId(entry);
    const envUrlPath = environment && environment !== 'master' ? `/environments/${environment}` : '';
    const objectUrl = `https://app.contentful.com/spaces/${spaceId}${envUrlPath}/entries/${entryId}`;
    return {
        type: 'document',
        id: entryId,
        manageUrl: objectUrl,
        modelName: model.name,
        ...commonFields(entry, userMap),
        fields: convertFields({
            fields: entry.fields,
            model,
            defaultLocale
        }),
        context: {
            sys: {
                type: entry.sys.type,
                version: entry.sys.version,
                publishedVersion: entry.sys.publishedVersion,
                archivedVersion: entry.sys.archivedVersion
            }
        }
    };
}
exports.convertEntry = convertEntry;
function convertAsset({ asset, userMap, defaultLocale, useLocalizedAssetFields }) {
    var _a;
    if (!asset) {
        return;
    }
    const assetId = getEntityId(asset);
    const spaceId = getEntitySpaceId(asset);
    const environment = getEntryEnvironmentId(asset);
    const envUrlPath = environment && environment !== 'master' ? `/environments/${environment}` : '';
    const objectUrl = `https://app.contentful.com/spaces/${spaceId}${envUrlPath}/assets/${assetId}`;
    // Remap Contentful Asset fields to Stackbit AssetFields
    // ContentfulAsset.fields: {
    //   title: {
    //     "en-US": "...",
    //     "en-GB": "..."
    //   },
    //   file: {
    //     "en-US": { url: "..." },
    //     "en-GB": { url: "..." }
    //   }
    // }
    // => StackbitAsset.fields: {
    //   title: {
    //     "type": "string",
    //     "localized": true,
    //     "locales": [
    //       { "locale": "en-US", "value": "..." },
    //       { "locale": "en-GB", "value": "..." }
    //     ]
    //   },
    //   url: {
    //     "type": "string",
    //     "localized": true,
    //     "locales": [
    //       { "locale": "en-US", "value": "..." },
    //       { "locale": "en-GB", "value": "..." }
    //     ]
    //   }
    // }
    const titleField = (_a = toDocumentField(asset.fields.title, useLocalizedAssetFields, defaultLocale, {
        type: 'string'
    }, (val) => ({ value: val }))) !== null && _a !== void 0 ? _a : {
        type: 'string',
        value: null
    };
    const fileField = toDocumentField(asset.fields.file, useLocalizedAssetFields, defaultLocale, {
        type: 'assetFile'
    }, (val) => {
        var _a, _b, _c, _d, _e;
        return ({
            url: val.url,
            fileName: val.fileName,
            contentType: val.contentType,
            size: (_a = val.details) === null || _a === void 0 ? void 0 : _a.size,
            dimensions: {
                width: (_c = (_b = val.details) === null || _b === void 0 ? void 0 : _b.image) === null || _c === void 0 ? void 0 : _c.width,
                height: (_e = (_d = val.details) === null || _d === void 0 ? void 0 : _d.image) === null || _e === void 0 ? void 0 : _e.height
            }
        });
    });
    if (!fileField) {
        return;
    }
    return {
        type: 'asset',
        id: assetId,
        manageUrl: objectUrl,
        ...commonFields(asset, userMap),
        fields: {
            title: titleField,
            file: fileField
        },
        context: {
            sys: {
                type: asset.sys.type,
                version: asset.sys.version,
                publishedVersion: asset.sys.publishedVersion,
                archivedVersion: asset.sys.archivedVersion
            }
        }
    };
}
exports.convertAsset = convertAsset;
function commonFields(entity, userMap) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
    // currently we only expose isChanged that is treated as isDraft and isChanged because in Sanity there is no way to tell the difference
    const isDraft = !((_a = entity.sys) === null || _a === void 0 ? void 0 : _a.publishedVersion) && !((_b = entity.sys) === null || _b === void 0 ? void 0 : _b.archivedVersion);
    const isChanged = !!((_c = entity.sys) === null || _c === void 0 ? void 0 : _c.publishedVersion) && ((_d = entity.sys) === null || _d === void 0 ? void 0 : _d.version) >= ((_e = entity.sys) === null || _e === void 0 ? void 0 : _e.publishedVersion) + 2;
    const status = isDraft ? 'added' : isChanged ? 'modified' : 'published';
    const createdByEmail = getUserEmailById((_h = (_g = (_f = entity.sys) === null || _f === void 0 ? void 0 : _f.createdBy) === null || _g === void 0 ? void 0 : _g.sys) === null || _h === void 0 ? void 0 : _h.id, userMap);
    const updatedByEmail = getUserEmailById((_l = (_k = (_j = entity.sys) === null || _j === void 0 ? void 0 : _j.updatedBy) === null || _k === void 0 ? void 0 : _k.sys) === null || _l === void 0 ? void 0 : _l.id, userMap);
    const updatedByList = updatedByEmail ? [updatedByEmail] : [];
    return {
        status: status,
        createdAt: (_o = (_m = entity.sys) === null || _m === void 0 ? void 0 : _m.createdAt) !== null && _o !== void 0 ? _o : null,
        createdBy: createdByEmail,
        updatedAt: (_q = (_p = entity.sys) === null || _p === void 0 ? void 0 : _p.updatedAt) !== null && _q !== void 0 ? _q : null,
        updatedBy: updatedByList
    };
}
function getContentTypeForEntry(entity, contentTypeMap) {
    if (isAssetEntity(entity)) {
        return;
    }
    const contentTypeId = getEntryContentTypeId(entity);
    if (contentTypeId in contentTypeMap) {
        return contentTypeMap[contentTypeId];
    }
    return;
}
function isEntryEntity(entity) {
    return getEntityType(entity) === ENTITY_TYPES.ENTRY;
}
function isAssetEntity(entity) {
    return getEntityType(entity) === ENTITY_TYPES.ASSET;
}
function getEntityId(entity) {
    var _a;
    return (_a = entity.sys) === null || _a === void 0 ? void 0 : _a.id;
}
function getEntityType(entity) {
    var _a;
    return (_a = entity.sys) === null || _a === void 0 ? void 0 : _a.type;
}
function getEntitySpaceId(entity) {
    var _a, _b, _c;
    return (_c = (_b = (_a = entity.sys) === null || _a === void 0 ? void 0 : _a.space) === null || _b === void 0 ? void 0 : _b.sys) === null || _c === void 0 ? void 0 : _c.id;
}
function getEntryEnvironmentId(entity) {
    var _a, _b, _c;
    return (_c = (_b = (_a = entity.sys) === null || _a === void 0 ? void 0 : _a.environment) === null || _b === void 0 ? void 0 : _b.sys) === null || _c === void 0 ? void 0 : _c.id;
}
function getEntryContentTypeId(entry) {
    var _a, _b, _c;
    return (_c = (_b = (_a = entry.sys) === null || _a === void 0 ? void 0 : _a.contentType) === null || _b === void 0 ? void 0 : _b.sys) === null || _c === void 0 ? void 0 : _c.id;
}
function getUserEmailById(userId, userMap) {
    var _a;
    if (!userId) {
        return;
    }
    return (_a = userMap[userId]) === null || _a === void 0 ? void 0 : _a.email;
}
function convertFields({ fields, model, defaultLocale }) {
    const fieldsByName = lodash_1.default.keyBy(model.fields, 'name');
    return lodash_1.default.reduce(fields, (documentFields, value, fieldName) => {
        const modelField = fieldsByName[fieldName];
        if (!modelField) {
            return documentFields;
            // TODO: log user error
            // throw new Error(`Error in contentful-entries-converter, no model field found for entry field name ${fieldName}`);
        }
        const documentField = convertFieldType({
            value,
            modelField,
            defaultLocale,
            localized: !!modelField.localized
        });
        if (documentField) {
            documentFields[fieldName] = documentField;
        }
        return documentFields;
    }, {});
}
function convertFieldType({ value, modelField, defaultLocale, localized }) {
    var _a;
    if (modelField.type === 'list') {
        const itemsModel = (_a = modelField.items) !== null && _a !== void 0 ? _a : { type: 'string' };
        return toDocumentField(value, localized, defaultLocale, {
            type: 'list'
        }, (val) => ({
            items: lodash_1.default.map(val, (item) => {
                var _a;
                if (itemsModel.type === 'reference') {
                    return {
                        type: 'reference',
                        refType: 'document',
                        refId: lodash_1.default.get(item, 'sys.id')
                    };
                }
                else if (itemsModel.type === 'cross-reference') {
                    const urn = lodash_1.default.get(item, 'sys.urn');
                    return {
                        type: 'cross-reference',
                        refType: 'document',
                        ...crossReferenceFieldPropsFromUrn(urn)
                    };
                }
                else if (itemsModel.type === 'image') {
                    if (itemsModel.source === 'cloudinary') {
                        return {
                            type: 'image',
                            source: itemsModel.source,
                            sourceData: item
                        };
                    }
                    if (itemsModel.source === 'bynder') {
                        return {
                            type: 'image',
                            source: itemsModel.source,
                            sourceData: item,
                            fields: {
                                title: {
                                    type: 'string',
                                    value: item === null || item === void 0 ? void 0 : item.name
                                },
                                url: {
                                    type: 'string',
                                    value: item === null || item === void 0 ? void 0 : item.src
                                }
                            }
                        };
                    }
                    if (itemsModel.source === 'aprimo') {
                        return {
                            type: 'image',
                            source: itemsModel.source,
                            sourceData: item,
                            fields: {
                                title: {
                                    type: 'string',
                                    value: item === null || item === void 0 ? void 0 : item.title
                                },
                                url: {
                                    type: 'string',
                                    value: (_a = item === null || item === void 0 ? void 0 : item.rendition) === null || _a === void 0 ? void 0 : _a.publicuri
                                }
                            }
                        };
                    }
                    return {
                        type: 'reference',
                        refType: 'asset',
                        refId: lodash_1.default.get(item, 'sys.id')
                    };
                }
                else if (itemsModel.type === 'richText') {
                    return {
                        type: 'richText',
                        hint: flattenRichText(item).substring(0, 200),
                        value: item
                    };
                }
                return {
                    type: itemsModel.type,
                    value: item
                };
            })
        }));
    }
    else if (modelField.type === 'reference') {
        return toDocumentField(value, localized, defaultLocale, {
            type: 'reference',
            refType: 'document'
        }, (val) => ({
            refId: lodash_1.default.get(val, 'sys.id')
        }));
    }
    else if (modelField.type === 'cross-reference') {
        return toDocumentField(value, localized, defaultLocale, {
            type: 'cross-reference',
            refType: 'document'
        }, (val) => {
            const urn = lodash_1.default.get(val, 'sys.urn');
            return crossReferenceFieldPropsFromUrn(urn);
        });
    }
    else if (modelField.type === 'image') {
        if (modelField.source && contentful_consts_1.CONTENTFUL_BUILT_IN_IMAGE_SOURCES.includes(modelField.source)) {
            if (modelField.source === 'bynder') {
                return toDocumentField(value, localized, defaultLocale, {
                    type: 'image',
                    source: modelField.source
                }, (val) => {
                    var _a, _b;
                    return ({
                        fields: {
                            title: {
                                type: 'string',
                                value: (_a = val[0]) === null || _a === void 0 ? void 0 : _a.name
                            },
                            url: {
                                type: 'string',
                                value: (_b = val[0]) === null || _b === void 0 ? void 0 : _b.src
                            }
                        },
                        sourceData: val[0]
                    });
                });
            }
            return toDocumentField(value, localized, defaultLocale, {
                type: 'image',
                source: modelField.source
            }, (val) => ({
                sourceData: val[0]
            }));
        }
        return toDocumentField(value, localized, defaultLocale, {
            type: 'reference',
            refType: 'asset'
        }, (val) => ({
            refId: lodash_1.default.get(val, 'sys.id')
        }));
    }
    else if (modelField.type === 'richText') {
        return toDocumentField(value, localized, defaultLocale, {
            type: 'richText'
        }, (val) => ({
            hint: flattenRichText(val).substring(0, 200),
            value: val
        }));
    }
    else if (modelField.type === 'object' || modelField.type === 'model') {
        throw new Error('Stackbit object and model field types can not be used with Contentful');
    }
    return toDocumentField(value, localized, defaultLocale, {
        type: modelField.type
    }, (val) => ({
        value: val
    }));
}
function toDocumentField(fieldValue, localized, defaultLocale, documentFieldBaseProps, documentFieldSpecificProps) {
    if (localized) {
        return {
            ...documentFieldBaseProps,
            localized: true,
            locales: lodash_1.default.mapValues(fieldValue, (val, locale) => ({
                locale,
                ...documentFieldSpecificProps(val)
            }))
        };
    }
    if (!fieldValue || !(defaultLocale in fieldValue)) {
        return null;
        // TODO: log user error
        // throw new Error(`Error in contentful-entries-converter, non localized field has no default locale`);
    }
    const defaultLocaleValue = fieldValue[defaultLocale];
    return {
        ...documentFieldBaseProps,
        ...documentFieldSpecificProps(defaultLocaleValue)
    };
}
function crossReferenceFieldPropsFromUrn(urn) {
    var _a, _b;
    const match = urn.match(/crn:contentful:::content:spaces\/([^/]+)\/entries\/(.+)$/);
    const spaceId = (_a = match === null || match === void 0 ? void 0 : match[1]) !== null && _a !== void 0 ? _a : 'ERROR_PARSING_URN';
    const entryId = (_b = match === null || match === void 0 ? void 0 : match[2]) !== null && _b !== void 0 ? _b : 'ERROR_PARSING_URN';
    return {
        refId: entryId,
        refSrcType: 'contentful',
        refProjectId: spaceId
    };
}
function flattenRichText(node) {
    if (lodash_1.default.get(node, 'nodeType') === 'text') {
        return lodash_1.default.get(node, 'value', '');
    }
    const content = lodash_1.default.get(node, 'content');
    if (content) {
        return lodash_1.default.reduce(content, (accum, node) => {
            return accum + flattenRichText(node);
        }, '');
    }
    return '';
}
//# sourceMappingURL=contentful-entries-converter.js.map