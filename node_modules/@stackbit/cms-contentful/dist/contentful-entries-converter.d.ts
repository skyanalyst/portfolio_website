import type { EntryProps, AssetProps, UserProps } from 'contentful-management';
import type { Document, Asset, Cache } from '@stackbit/types';
export declare type DocumentContext = {
    sys: {
        type: string;
        version: number;
        publishedVersion?: number;
        archivedVersion?: number;
    };
};
export declare type AssetContext = DocumentContext;
export declare type ContextualDocument = Document<DocumentContext>;
export declare type ContextualAsset = Asset<AssetContext>;
export declare type EntityProps = EntryProps | AssetProps;
export declare type GetModelByName = Cache['getModelByName'];
export declare type ConvertEntriesOptions = {
    entries: EntityProps[];
    getModelByName: GetModelByName;
    userMap: Record<string, UserProps>;
    defaultLocale: string;
};
export declare function convertEntities({ entries, getModelByName, userMap, defaultLocale }: ConvertEntriesOptions): ContextualDocument[];
export declare type ConvertAssetsOptions = {
    assets: AssetProps[];
    userMap: Record<string, UserProps>;
    defaultLocale: string;
    useLocalizedAssetFields: boolean;
};
export declare function convertAssets({ assets, userMap, defaultLocale, useLocalizedAssetFields }: ConvertAssetsOptions): ContextualAsset[];
export declare type ConvertEntryOptions = {
    entry: EntryProps;
    getModelByName: GetModelByName;
    userMap: Record<string, UserProps>;
    defaultLocale: string;
};
export declare function convertEntry({ entry, getModelByName, userMap, defaultLocale }: ConvertEntryOptions): ContextualDocument | undefined;
export declare type ConvertAssetOptions = {
    asset: AssetProps;
    userMap: Record<string, UserProps>;
    defaultLocale: string;
    useLocalizedAssetFields: boolean;
};
export declare function convertAsset({ asset, userMap, defaultLocale, useLocalizedAssetFields }: ConvertAssetOptions): ContextualAsset | undefined;
//# sourceMappingURL=contentful-entries-converter.d.ts.map