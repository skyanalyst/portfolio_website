/**
 * Stackbit Field Types
 */
import { STYLE_PROPS } from './consts';
import type { DocumentWithSource } from './content-source-document';
import type { DocumentModelField, DocumentObjectField } from './content-source-document-fields';
import type { ConfigDelegate } from './config-delegate';
import type { CustomActionField, CustomActionObjectField } from './custom-actions';
export declare type Field = FieldString | FieldUrl | FieldSlug | FieldText | FieldMarkdown | FieldHtml | FieldNumber | FieldBoolean | FieldDate | FieldDatetime | FieldColor | FieldJson | FieldRichText | FieldFile | FieldEnum | FieldImage | FieldObject | FieldModel | FieldReference | FieldCrossReference | FieldStyle | FieldList;
export declare type DistributeFieldsExtension<Type extends Field> = Type extends {
    type: 'object';
} ? Partial<Omit<Type, 'name' | 'fields'>> & {
    name: string;
    fields?: DistributeFieldsExtension<Field>[];
} : Type extends {
    type: 'list';
} ? Partial<Omit<Type, 'name' | 'items'>> & {
    name: string;
    items?: DistributePartialListItems<FieldListItems>;
} : Type extends {
    type: 'style';
} ? Type : Type extends {
    type: 'cross-reference';
} ? Type : Partial<Omit<Type, 'name'>> & {
    name: string;
};
export declare type DistributePartialListItems<Type extends FieldListItems> = Type extends {
    type: 'object';
} ? Partial<Omit<Type, 'fields'>> & {
    fields?: DistributeFieldsExtension<Field>[];
} : Type extends {
    type: 'cross-reference';
} ? Type : Partial<Type>;
export declare type FieldExtension = DistributeFieldsExtension<Field>;
export declare type FieldType = Field['type'];
export declare type FieldSpecificProps = FieldStringProps | FieldUrlProps | FieldSlugProps | FieldTextProps | FieldMarkdownProps | FieldHtmlProps | FieldNumberProps | FieldBooleanProps | FieldDateProps | FieldDatetimeProps | FieldColorProps | FieldJsonProps | FieldRichTextProps | FieldFileProps | FieldEnumProps | FieldImageProps | FieldObjectProps | FieldModelProps | FieldReferenceProps | FieldCrossReferenceProps | FieldStyleProps | FieldListProps;
declare type ExtractByType<Union extends {
    type: FieldType;
}, Type extends FieldType> = Union extends {
    type: Type;
} ? Union : never;
export declare type FieldForType<Type extends FieldType> = ExtractByType<Field, Type>;
export declare type FieldSpecificPropsForType<Type extends FieldType> = ExtractByType<FieldSpecificProps, Type>;
export declare type FieldSpecificPropsForField<Type extends Field> = ExtractByType<FieldSpecificProps, Type['type']>;
export declare type FieldString = FieldCommonProps & FieldStringProps;
export declare type FieldUrl = FieldCommonProps & FieldUrlProps;
export declare type FieldSlug = FieldCommonProps & FieldSlugProps;
export declare type FieldText = FieldCommonProps & FieldTextProps;
export declare type FieldMarkdown = FieldCommonProps & FieldMarkdownProps;
export declare type FieldHtml = FieldCommonProps & FieldHtmlProps;
export declare type FieldNumber = FieldCommonProps & FieldNumberProps;
export declare type FieldBoolean = FieldCommonProps & FieldBooleanProps;
export declare type FieldDate = FieldCommonProps & FieldDateProps;
export declare type FieldDatetime = FieldCommonProps & FieldDatetimeProps;
export declare type FieldColor = FieldCommonProps & FieldColorProps;
export declare type FieldJson = FieldCommonProps & FieldJsonProps;
export declare type FieldRichText = FieldCommonProps & FieldRichTextProps;
export declare type FieldFile = FieldCommonProps & FieldFileProps;
export declare type FieldEnum = FieldCommonProps & FieldEnumProps;
export declare type FieldImage = FieldCommonProps & FieldImageProps;
export declare type FieldObject = Omit<FieldCommonProps, 'actions'> & FieldObjectProps;
export declare type FieldModel = FieldCommonProps & FieldModelProps;
export declare type FieldReference = FieldCommonProps & FieldReferenceProps;
export declare type FieldCrossReference = FieldCommonProps & FieldCrossReferenceProps;
export declare type FieldStyle = FieldCommonProps & FieldStyleProps;
export declare type FieldList = FieldCommonProps & FieldListProps;
export declare type FieldListObject = FieldCommonProps & FieldListItemsObjectProps;
export declare type FieldListModel = FieldCommonProps & FieldListItemsModelProps;
export declare type FieldListReference = FieldCommonProps & FieldListItemsReferenceProps;
export declare type FieldListCrossReference = FieldCommonProps & FieldListItemsCrossReferenceProps;
export interface FieldCommonProps {
    /**
     * The `name` property defines the name of the field key used to store its value in the content source.
     */
    name: string;
    /**
     * Use the `label` property to provide the human-readable label for the field. If not specified, the
     * `name` property will be start-cased and used instead.
     */
    label?: string;
    /**
     * The `description` is presented as a tooltip when hovering over the info icon in Stackbit UI.
     */
    description?: string;
    /**
     * Use the `required` property to mark a field as required. Stackbit will display an error message
     * below the field if its value is not set, and publishing the document containing this field will
     * not be possible until it has been filled in.
     */
    required?: boolean;
    /**
     * Use the `default` property to specify an initial value for a field
     * when no value provided when creating the parent object.
     */
    default?: unknown | FieldInitialValueFunction;
    /**
     * Use the `group` field along with the `fieldGroups` model property,
     * to organize related fields into logical groups presented as tabs within the Stackbit UI.
     */
    group?: string;
    /**
     * Use the `const` property to specify a value for a field when creating
     * the parent object. Setting this property implies that a field will be
     * read-only and cannot be changed via Stackbit UI.
     */
    const?: unknown | FieldInitialValueFunction;
    /**
     * The `hidden` property can be used to hide fields from the Stackbit UI and prevent content
     * editors from modifying their values. This can be particularly useful for fields that are
     * controlled by internal processes, or for fields that have constant values specified using
     * the `const` property.
     */
    hidden?: boolean;
    /**
     * You can use the `readOnly` property to restrict the editing of fields in the Stackbit UI.
     *
     * For primitive field types such as strings, numbers, and booleans, setting `readOnly`
     * to `true` will prevent the field from being edited.
     *
     * For complex field types like `reference`, `model`, `cross-reference`, and `object`,
     * setting `readOnly` to `true` will prevent editors from adding or removing the object
     * or reference to the document. However, it will not prevent editing of fields within
     * the nested or referenced object/document. To prevent editing of fields within an object,
     * `readOnly` must be set on each field that should not be editable.
     *
     * For `list` fields, setting `readOnly` to `true` will prevent editors from adding, removing,
     * or reordering items within the list.
     */
    readOnly?: boolean;
    /**
     * To enable field localization, set the `localized` property to `true`. When a model field
     * is marked as localized, the document fields returned from the content source must also be
     * localized.
     */
    localized?: boolean;
    actions?: CustomActionField[];
}
export declare type FieldCustomControlType = 'custom-modal-html' | 'custom-inline-html';
export interface FieldCustomControlTypeProps<ControlType = never> {
    /**
     * The `controlType` property can be utilized to define a custom UI control for the field.
     * If you choose to define it, you must also specify either the `controlUrl` or the
     * `controlFilePath` property.
     */
    controlType?: FieldCustomControlType | ControlType;
    /**
     * You can use the `controlFilePath` to specify the path to the HTML file containing a custom field UI.
     * When specifying this property, you must also specify the `controlType` property.
     */
    controlFilePath?: string;
}
export declare type FieldInitialValueFunction = (options: {
    data: Record<string, any>;
    locale?: string;
} & ConfigDelegate) => Promise<unknown>;
export declare type FieldBasicProps = FieldStringProps | FieldUrlProps | FieldSlugProps | FieldTextProps | FieldMarkdownProps | FieldHtmlProps | FieldBooleanProps | FieldDateProps | FieldDatetimeProps | FieldColorProps | FieldJsonProps | FieldRichTextProps | FieldFileProps;
export interface FieldStringProps extends FieldCustomControlTypeProps {
    type: 'string';
}
export interface FieldUrlProps extends FieldCustomControlTypeProps {
    type: 'url';
}
export interface FieldSlugProps extends FieldCustomControlTypeProps {
    type: 'slug';
}
export interface FieldTextProps extends FieldCustomControlTypeProps {
    type: 'text';
}
export interface FieldMarkdownProps extends FieldCustomControlTypeProps {
    type: 'markdown';
}
export interface FieldHtmlProps extends FieldCustomControlTypeProps {
    type: 'html';
}
export interface FieldBooleanProps extends FieldCustomControlTypeProps {
    type: 'boolean';
}
export interface FieldDateProps extends FieldCustomControlTypeProps {
    type: 'date';
}
export interface FieldDatetimeProps extends FieldCustomControlTypeProps {
    type: 'datetime';
}
export interface FieldColorProps extends FieldCustomControlTypeProps {
    type: 'color';
}
export interface FieldJsonProps extends FieldCustomControlTypeProps {
    type: 'json';
}
export interface FieldRichTextProps extends FieldCustomControlTypeProps {
    type: 'richText';
}
export interface FieldFileProps extends FieldCustomControlTypeProps {
    type: 'file';
}
export declare type FieldEnumProps = FieldEnumDropdownProps | FieldEnumThumbnailsProps | FieldEnumPaletteProps | FieldEnumPaletteColorsProps;
export interface FieldEnumDropdownProps extends FieldCustomControlTypeProps<'dropdown' | 'button-group'> {
    type: 'enum';
    options: FieldEnumOptionValue[] | FieldEnumOptionObject[];
}
export interface FieldEnumThumbnailsProps {
    type: 'enum';
    controlType: 'thumbnails';
    options: FieldEnumOptionThumbnails[];
}
export interface FieldEnumPaletteProps {
    type: 'enum';
    controlType: 'palette';
    options: FieldEnumOptionPalette[];
}
export interface FieldEnumPaletteColorsProps {
    type: 'enum';
    controlType: 'palette-colors';
    options: FieldEnumOptionPaletteColors[];
}
export declare type FieldEnumOptionValue = string | number;
export interface FieldEnumOptionObject {
    label: string;
    value: FieldEnumOptionValue;
}
export interface FieldEnumOptionThumbnails extends FieldEnumOptionObject {
    thumbnail: string;
}
export interface FieldEnumOptionPalette extends FieldEnumOptionObject {
    textColor?: string;
    backgroundColor?: string;
    borderColor?: string;
}
export interface FieldEnumOptionPaletteColors extends FieldEnumOptionObject {
    colors: string[];
}
export interface FieldImageProps extends FieldCustomControlTypeProps {
    type: 'image';
    source?: string;
}
export interface FieldNumberProps extends FieldCustomControlTypeProps<'slider'> {
    type: 'number';
    subtype?: 'int' | 'float';
    min?: number;
    max?: number;
    step?: number;
    unit?: string;
}
export interface FieldObjectProps extends FieldCustomControlTypeProps {
    type: 'object';
    labelField?: string;
    preview?: DocumentFieldPreview;
    thumbnail?: string;
    variantField?: string;
    actions?: (CustomActionField | CustomActionObjectField)[];
    fieldGroups?: FieldGroupItem[];
    fields: Field[];
}
export interface FieldGroupItem {
    name: string;
    label: string;
    icon?: string;
}
export interface FieldModelProps extends FieldCustomControlTypeProps {
    type: 'model';
    models: string[];
    groups?: string[];
}
export interface FieldReferenceProps extends FieldCustomControlTypeProps {
    type: 'reference';
    models: string[];
    groups?: string[];
}
export interface FieldCrossReferenceProps extends FieldCustomControlTypeProps {
    type: 'cross-reference';
    models: FieldCrossReferenceModel[];
}
export interface FieldCrossReferenceModel {
    modelName: string;
    srcType?: string;
    srcProjectId?: string;
}
export declare type StyleProps = (typeof STYLE_PROPS)[number];
export interface FieldStyleProps {
    type: 'style';
    styles: Record<string, Partial<Record<StyleProps, any>>>;
}
export declare type FieldListProps = FieldListItemsBasicProps | FieldListItemsEnumProps | FieldListItemsImageProps | FieldListItemsNumberProps | FieldListItemsObjectProps | FieldListItemsModelProps | FieldListItemsReferenceProps | FieldListItemsCrossReferenceProps;
export declare type FieldListItems = FieldListProps['items'];
export declare type FieldListItemsForType<Type extends FieldType> = ExtractByType<FieldListItems, Type>;
export interface FieldListItemsBasicProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldBasicProps;
}
export interface FieldListItemsEnumProps extends FieldCustomControlTypeProps<'checkbox'> {
    type: 'list';
    items: FieldEnumProps;
}
export interface FieldListItemsImageProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldImageProps;
}
export interface FieldListItemsNumberProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldNumberProps;
}
export interface FieldListItemsObjectProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldObjectProps;
}
export interface FieldListItemsModelProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldModelProps;
}
export interface FieldListItemsReferenceProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldReferenceProps;
}
export interface FieldListItemsCrossReferenceProps extends FieldCustomControlTypeProps {
    type: 'list';
    items: FieldCrossReferenceProps;
}
export declare type DocumentPreview = DocumentPreviewFunction | PreviewFields;
export declare type DocumentFieldPreview = ObjectPreviewFunction | PreviewFields;
export declare type DocumentPreviewFunction = (options: {
    document: DocumentWithSource;
    currentLocale?: string;
} & ConfigDelegate) => {
    title?: string;
    subtitle?: string;
    image?: string;
};
export declare type ObjectPreviewFunction = (options: {
    parentDocument: DocumentWithSource;
    documentField: DocumentModelField | DocumentObjectField;
    currentLocale?: string;
} & ConfigDelegate) => {
    title?: string;
    subtitle?: string;
    image?: string;
};
export interface PreviewFields {
    title?: string;
    subtitle?: string;
    image?: string;
}
export {};
//# sourceMappingURL=model-fields.d.ts.map